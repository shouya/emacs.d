#+TITLE: My Emacs Preferences
#+latex_compiler: xelatex
#+latex_header: \usemintedstyle{emacs}

* Setup personal information

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t; -*-
(setq-default user-full-name "Shou Ya"
              user-email-address "shou@lain.li")
#+END_SRC

* Boot up
** Enable packages are loadable

=lisp/= stores modules I copied from [[https://github.com/purcell/emacs.d][purcell/emacs.d]].

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+END_SRC

=site-lisp/= stores downloaded modules that are not on MELPA.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "site-lisp" user-emacs-directory))
#+END_SRC

** Configure =straight.el=

=straight.el= allows loading packages directly from VC upstream, while keeping a
lock file for specific version, some new packages depend on it.

** Enable ELPA with straight

#+BEGIN_SRC emacs-lisp
(straight-use-package 'el-patch)
#+END_SRC

** Install =use-package= with straight.el
Ensure =use-package= is installed.

#+BEGIN_SRC emacs-lisp
(defvar use-package-compute-statistics)
(defvar straight-use-package-by-default)

(straight-use-package 'use-package)
(setq use-package-compute-statistics t)
(setq straight-use-package-by-default t)
#+END_SRC

Allow installing required system packages automatically.

#+BEGIN_SRC emacs-lisp
(use-package use-package-ensure-system-package)
#+END_SRC

** Start server automatically

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook
          (lambda ()
            (require 'server)
            (unless (server-running-p)
              (server-start))))
#+END_SRC

** Start edit server (for browser extensions)

Browser extension: [[https://github.com/GhostText/GhostText][GhostText]]

#+BEGIN_SRC emacs-lisp
(use-package atomic-chrome
  :hook (emacs-startup . atomic-chrome-start-server)
  :if (display-graphic-p))
#+END_SRC

** Make window resizable by window manager

#+BEGIN_SRC emacs-lisp
(setq-default frame-resize-pixelwise t)
#+END_SRC

** Set exec path

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :when (memq window-system '(mac ns x))
  :hook (emacs-startup . exec-path-from-shell-initialize)
  :custom
  (exec-path-from-shell-variables '("PATH"))
  (exec-path-from-shell-arguments '("-i"))

  ;; do not check if i set path in zshenv or zshrc
  (exec-path-from-shell-check-startup-files nil)
)
#+END_SRC

** Inhibit startup screen

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

** Load some basic libraries
#+BEGIN_SRC emacs-lisp
(use-package dash)
(use-package f)
(use-package s)
#+END_SRC

** Restart emacs command

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :commands restart-emacs)
#+END_SRC

* General behavior
** Save customized settings in a separate file

By default the customization is saved into =init.el=. Avoid the mess by saving it
in a seperate file =custom.el=.

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
(load-file custom-file)
#+END_SRC

** macOS specific customization
*** Emacs release selection

Not all Emacs release works good under macOS. Here's the best one I found.

[[https://github.com/railwaycat/homebrew-emacsmacport]]

Features:

- Window resizable
- Good OS clipboard interaction
- Meta+Shift combo recognized in Emacs

*** Treat option key as meta

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq-default mac-option-modifier 'meta)
  (setq-default mac-command-modifier 'super))
#+END_SRC

*** Enable clipboard for terminal

#+BEGIN_SRC emacs-lisp
(use-package osx-clipboard
  :if (eq system-type 'darwin)
  :config (osx-clipboard-mode +1))
#+END_SRC

*** =Cmd+C/Cmd+C= for copying and pasting

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (global-set-key (kbd "s-c") 'kill-ring-save)
  (global-set-key (kbd "s-v") 'yank))
#+END_SRC

** =C-c e= to edit current preferences

#+BEGIN_SRC emacs-lisp
(define-key global-map
  (kbd "C-c e")
  (lambda ()
    (interactive)
    (find-file (expand-file-name "preferences.org" user-emacs-directory))))
#+END_SRC

** =C-x k= Kill current buffer

#+BEGIN_SRC emacs-lisp
(bind-key "C-x k"
  (lambda () (interactive) (kill-buffer (current-buffer))))
#+END_SRC

** =C-x C-b= to view ibuffer

#+BEGIN_SRC emacs-lisp
(bind-key "C-x C-b" 'ibuffer)
#+END_SRC

** Open scratch

#+BEGIN_SRC emacs-lisp
(defun scratch ()
  "open a scratch buffer"
  (interactive)
  (let* ((buffer-name (make-temp-name "scratch-"))
         (buffer (generate-new-buffer buffer-name)))
    (set (make-local-variable 'major-mode) 'org-mode)
    (switch-to-buffer buffer)
    (org-mode)))
#+END_SRC

** Web browser


I use eww as default web browser when opening web url in emacs.

I also like to open the browser in a separate window instead of on the current
one.

#+BEGIN_SRC emacs-lisp
(defun shou/eww-browse-url-in-new-buffer (url &rest ignore)
  (interactive "sURL: ")
  (switch-to-buffer-other-window (get-buffer-create "*eww*"))
  (eww-browse-url url))
#+END_SRC

=eww-readable= makes the web page more readable by hiding unnecessary content, so
I switched to readable mode after a web page is rendered.

#+BEGIN_SRC emacs-lisp
;; (add-hook 'eww-after-render-hook 'eww-readable)
(setq eww-after-render-hook '())
#+END_SRC

** Startup profiler

#+BEGIN_SRC emacs-lisp
(use-package esup
  :commands (esup))
#+END_SRC

** Backup

#+BEGIN_SRC emacs-lisp
(let* ((base-dir (cond
                  ((f-directory? "~/tmp") "~/tmp")
                  (t "/tmp")))
       (backup-dir (f-join base-dir "emacs-backup")))
  (when (not (f-directory? backup-dir))(f-mkdir backup-dir))
  (setq backup-directory-alist `((".*" . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,backup-dir t))))
#+END_SRC

** Remove trailing whitespaces on save

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Sensible defaults

Copied from [[https://github.com/hrs/sensible-defaults.el/blob/master/sensible-defaults.el][hrs's config]] and [[https://github.com/technomancy/better-defaults/blob/master/better-defaults.el][technomancy's config]].

#+BEGIN_SRC emacs-lisp
;; Don't ask `yes/no?', ask `y/n?'.
(fset 'yes-or-no-p 'y-or-n-p)

;; If some text is selected, and you type some text, delete the selected text and start inserting your typed text
(delete-selection-mode t)

(setq
 ;; middle mouse button yank instead of click
 mouse-yank-at-point t
 ;; search apropos in docs
 apropos-do-all t
 ;; automatically append final new line
 require-final-newline t
 ;; visual bell
 visible-bell t)

;; was zap-to-char
(bind-key* "M-z" 'zap-up-to-char)

;; I don't use bidir text at all. This hugely increase scroll speed.
(setq-default bidi-inhibit-bpa t)
#+END_SRC

** Save last position for each file

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook (lambda () (save-place-mode t)))
#+END_SRC

** Replace region directly

With this mode, when I select a region and start typing, the text will
replace the active region automatically. Similar to the behavior of
most GUI editors.

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

** Watch for long pause and explain them

#+BEGIN_SRC emacs-lisp
(use-package explain-pause-mode
  :straight (:host github :repo "lastquestion/explain-pause-mode")
  :disabled
  :hook (emacs-startup . explain-pause-mode)

  ;; only report if the pauses exceed 100ms
  :custom (explain-pause-blocking-too-long-ms 30)
)
#+END_SRC

** Set =text-mode= as the default mode

#+BEGIN_SRC emacs-lisp
(setq-default initial-major-mode 'text-mode)
#+END_SRC

** Unbind keys

Here I unbind keyboard shortcuts that I frequently mistype.

#+begin_src emacs-lisp
;; It was bound to kill-region or something.
;; I often accidentally deleted whole buffer with this key which is frastrating.
(unbind-key "s-x")
#+end_src

* UI
** Tweak main UI

Hide the title bar, menu bar, as well as the scroll bar.

#+BEGIN_SRC emacs-lisp
;; this one turns off slower so I deferred it to execute after boot
(when (boundp 'tool-bar-mode)
  (add-hook 'emacs-startup-hook (lambda () (tool-bar-mode -1))))
(when (boundp 'menu-bar-mode)
  (menu-bar-mode -1))
(when (boundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
#+END_SRC

Enable pixel-wise scrolling for mouse scroll-wheel. It looks nicer.

#+BEGIN_SRC emacs-lisp
;; disabling it for now as it sometimes causes emacs to hang
; (add-hook 'emacs-startup-hook 'pixel-scroll-mode)
#+END_SRC

Disable visual bell because Emacs for macOS renders it poorly.

#+BEGIN_SRC emacs-lisp
(setq-default ring-bell-function 'ignore)
#+END_SRC

Show file name in window title.

#+BEGIN_SRC emacs-lisp
(setq frame-title-format '("%b - %m @ Emacs"))
#+END_SRC

** Set font

I use "Input" as my default font face.

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'default-frame-alist '(font . "Input-14"))

;; Experiment with different fonts here:
(set-frame-font "Fira Code-13")
#+END_SRC

** Ligature

#+begin_src emacs-lisp
(use-package ligature
  :straight (:host github :repo "mickeynp/ligature.el")
  :when (eq system-type 'darwin)
  :config
  ;; Fira code ligatures that I use
  (ligature-set-ligatures t '("www" ":="
                              ".." "..." "<=>" "=>" "->" "<-" "<->" "::"
                              "##" "###" "####" "#####" "######"
                              "<<" "<<<" ">>" ">>>" "//" "///"
                              "||" "&&"
                              ))
  (ligature-set-ligatures 'prog-mode
                          '("www" "==" "===" "=/=" "!==" "!="
                            ".." "..." "<=>" "=>" "->" "<-" "<->" "::"
                            "##" "###" "####" "#####" "######"
                            "<<" "<<<" ">>" ">>>" "//" "///"
                            "||" "&&" ))
  (global-ligature-mode t)
  )
#+end_src

** Install all-the-icon

In order for the icons to work it is very important that you install the
Resource Fonts included in this package, they are available in the fonts
directory. You can also install the latest fonts for this package in the
(guessed?) based on the OS by calling the following function;

=M-x all-the-icons-install-fonts=

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC

** Theme

I use =sanityinc-tomorrow= theme because it's high contrast and colorful.

#+BEGIN_SRC emacs-lisp
(setq shou/current-theme 'doom-tomorrow-night)

(use-package doom-themes
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  :config
  (load-theme shou/current-theme t)
  (setq ansi-color-names-vector
        ["#c5c8c6" ; customized
         "#cc6666" "#b5bd68" "#f0c674" "#81a2be" "#c9b4cf" "#8abeb7" "#c4c8c6"])
  (setq ansi-color-map (ansi-color-make-color-map))
)
#+END_SRC

** Modeline customization

Doom modeline

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :custom
  (doom-modeline-height 19)
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-env-version nil)
  (doom-modeline-lsp nil)
  (doom-modeline-modal-icon nil)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-project-detection 'project)
  (doom-modeline-persp-name t)

  :config
  (set-face-attribute 'mode-line nil :height 120 :background "#330033")
  (set-face-attribute 'mode-line-inactive nil :height 120 :background "#0d0d0d")

  (doom-modeline-mode 1))
#+END_SRC

** Highlight current line

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
#+END_SRC

** Highlight uncommitted changes

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :hook (emacs-startup . global-diff-hl-mode))
#+END_SRC

** Highlight bracket

#+BEGIN_SRC emacs-lisp
(defun shou/visualize-matching-parens ()
  (show-paren-mode +1)
  (setq show-paren-style 'expression)

  (custom-theme-set-faces
   'user
   '(show-paren-match ((t (:foreground nil :bold nil :background "#304020"))))
  )
  (use-package highlight-parentheses)
)

(add-hook 'emacs-startup-hook 'shou/visualize-matching-parens)

#+END_SRC

** Blink cursor

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 1)
#+END_SRC

** Window split

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-x -") 'split-window-below)
(define-key global-map (kbd "C-x |") 'split-window-right)
#+END_SRC

** Keep track of cursor whenever window scrolls

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :commands beacon-mode
  :hook (emacs-startup . beacon-mode)
  :custom (beacon-color "#d3d3d3"))
#+END_SRC

** Turn off auto window scroll to get faster movement

This trick is based on [[https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746][motion - Emacs point(cursor) movement lag]].

#+BEGIN_SRC emacs-lisp
(setq auto-window-vscroll nil)
#+END_SRC

** Window management with =ace-window=

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  ;; :bind ("M-o" . ace-window)
  :bind ("M-o" . other-window)
  :custom
  ;; show current action in minibuffer
  (aw-minibuffer-flag t)
  ;; don't grey out background
  (aw-background nil)
  ;; only jump between windows in the same frame
  (aw-scope 'frame)
  ;; custom actions
  (aw-dispatch-alist '((?o aw-flip-window)
                       (?B aw-switch-buffer-other-window "Switch buffer in other window")
                       (?x delete-window)
                       (?X aw-delete-window "Delete other window")
                       (?m aw-swap-window "Swap with window")
                       (?M aw-move-window "Move and override window at location")
                       (?C aw-copy-window "Copy and override window at location")
                       (?? aw-show-dispatch-help))))

;; Disable C-x o
(global-unset-key (kbd "C-x o"))
#+END_SRC

** Remember layout for undoing

Use =C-c <left>= and =C-c <right>= to undo layout.

#+begin_src emacs-lisp
(use-package winner
  :hook (emacs-startup . winner-mode))
#+end_src

** Alert library

#+BEGIN_SRC emacs-lisp
(use-package alert
  :commands alert
  :custom
  (alert-default-style (cond
                        ((eq system-type 'darwin) 'osx-notifier)
                        ((display-graphic-p) 'libnotify)
                        (t 'mode-line))))
#+END_SRC

** Popup window manager

#+BEGIN_SRC emacs-lisp
(use-package popwin
  :hook (emacs-startup . popwin-mode)
  :config
  (push '("*elixir-format-errors*" :noselect t) popwin:special-display-config)
  (push "*idris-repl*" popwin:special-display-config)
  (push '("*idris-holes*" :noselect t) popwin:special-display-config)
  (push "*Help*" popwin:special-display-config)
  (push "*Warnings*" popwin:special-display-config)
  (push "*rustfmt*" popwin:special-display-config)
  (push "*explain-pause-log*" popwin:special-display-config)
  (push "*explain-pause-profiles*" popwin:special-display-config)
  (push '("*Flycheck errors*" :position bottom :stick t) popwin:special-display-config)
)

#+END_SRC

** Startup dashboard

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  ;; this is no longer working because it depends on the legacy cl lib
  :disabled
  :config
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  :custom
  (dashboard-items '((agenda . 7)
                     (recents . 5)
                     (projects . 5)))
  (dashboard-startup-banner 2)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-navigator t)
  (dashboard-set-footer nil)
  )
#+END_SRC

** Lock window for purpose

#+begin_src emacs-lisp
(with-eval-after-load 'bind-key
  (unbind-key "C-c ," org-mode-map))

(use-package window-purpose
  :bind (("C-c , d" . purpose-toggle-window-purpose-dedicated)
         ("C-c , D" . purpose-toggle-window-buffer-dedicated)))
#+end_src

** Page break lines =^L=

It render =^L= as a page break line, which is nicer to look at.

#+begin_src emacs-lisp
(use-package page-break-lines
  :hook (emacs-startup . global-page-break-lines-mode))
#+end_src

* Dired
** Load =dired-x= by default

Load Dired X that comes with Emacs.

#+BEGIN_SRC emacs-lisp
(require 'dired-x)
#+END_SRC

** Retain the same window when browsing

#+BEGIN_SRC emacs-lisp
(require 'dired)

(defun shou/dired-go-up ()
  (interactive)
  (find-alternate-file ".."))

(bind-keys :map dired-mode-map
           ;; Open directory in the same window
           ("RET" . dired-find-alternate-file)
           ;; Open directory in alternative window
           ("C-RET" . dired-find-file)
           ;; Go up
           ("^" . shou/dired-go-up))

;; do not show warning
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

** Copy file to split window

#+BEGIN_SRC emacs-lisp
(eval-after-load 'dired
  (setq dired-dwim-target t))
#+END_SRC

** Recursive copy and delete

#+BEGIN_SRC emacs-lisp
;; Always copy recursively
(setq-default dired-recursive-copies 'always)

;; Ask once before deleting
(setq-default dired-recursive-deletes 'top)
#+END_SRC

** Hide dot files by default

Hit =.= key to reveal the files.

#+BEGIN_SRC emacs-lisp
(use-package dired-hide-dotfiles
  :after (dired)
  :hook (dired-mode . dired-hide-dotfiles-mode)

  ;(evil-define-key 'normal dired-mode-map (kbd ".") 'dired-hide-dotfiles-mode)
)
#+END_SRC

** Hide details by default

The details can be revealed by hitting =(= key.

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC

** Make dired perform IO actions asynchronously

So it doesn't block the main UI when copying large files.

#+BEGIN_SRC emacs-lisp
(use-package async
  :config
  (dired-async-mode 1))
#+END_SRC

** Tree view

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :bind ("M-O" . treemacs-select-window)
  :config
  (use-package treemacs-magit
    :after treemacs magit)
  (use-package treemacs-projectile
    :after treemacs projectile)

  ;; customization
  (treemacs-resize-icons 16)
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode t)


  :custom
  (treemacs-width 20)

)
#+END_SRC

** Show human readable sizes

#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-alh")
#+END_SRC

* Terminal
** Use =vterm= for terminal support

#+BEGIN_SRC emacs-lisp
(use-package vterm
  ; :after evil-collection
  :disabled
  :commands (vterm vterm-other-window)
  :bind ("C-c t" . vterm)
  :custom
  (vterm-max-scrollback 20000)
  :config
  (define-key vterm-mode-map (kbd "C-c C-l") vterm-clear-scrollback))
#+END_SRC

* Editing
** Indentation

Use tab-width of 2 by default.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
#+END_SRC

Always indent with spaces.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

Some modes set this variable automatically, so we need to override them.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook
          (lambda () (setq-default indent-tabs-mode nil)))
#+END_SRC

** Detect indentation using heuristics

#+BEGIN_SRC emacs-lisp
(use-package dtrt-indent
  :commands dtrt-indent-mode
  :hook (prog-mode . dtrt-indent-mode)
)
(defalias 'detect-indentation 'dtrt-indent-mode)
(defalias 'detect-tab-size 'dtrt-indent-mode)
#+END_SRC

** Cursor movement
*** Use subword mode everywhere

#+BEGIN_SRC emacs-lisp
; (use-package syntax-subword
;   :hook (emacs-startup . global-syntax-subword-mode))
#+END_SRC

** Undo tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :hook (emacs-startup . global-undo-tree-mode))
#+END_SRC

** Minibuffer Completion
*** Counsel

I use counsel and ivy to complete commands in minibuffer.

Reference: [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org#configure-ivy-and-counsel][hrs/dotfiles]]

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :demand t
  :bind
  ("M-x" . counsel-M-x)
  ("M-y" . counsel-yank-pop)
  ("C-h v" . counsel-describe-variable)
  ("C-h f" . counsel-describe-function)
  ("C-x C-f" . counsel-find-file)
  ("C-c C-S-j" . counsel-org-goto-all)
  ("C-c f" . counsel-recentf)
  ("C-c i" . counsel-imenu)
  ("C-c u" . counsel-unicode-char)
  (:map ivy-minibuffer-map
        ("M-RET" . ivy-immediate-done))
  (:map org-mode-map
        ("C-c C-j" . counsel-org-goto))

  :config
  (setq ivy-count-format "(%d/%d) ")
  ;; Wrap around when reaches last page
  (setq ivy-wrap t)
  ;; Use recentf in switch buffers
  (setq ivy-use-virtual-buffers t)

  ;; Ignore order for searching words on files
  ;; Use regular matching for others
  (setq ivy-re-builders-alist
        '((read-file-name-internal . ivy--regex-ignore-order)
          ;; the following will get replaced by ivy-prescient
          (t . ivy--regex-plus)))

  ;; Do not insert "^" automatically
  (setq ivy-initial-inputs-alist nil)

  ;; Retain the window after backward-deleted last char
  (setq ivy-on-del-error-function nil)

  ;; Find file at point
  (setq counsel-find-file-at-point t)

  ;; auto follow current imenu entry
  (ivy-configure 'counsel-imenu :update-fn 'auto)

  ;; this package allows richer message for describe variable, etc
  (use-package ivy-rich)

  ;; Start ivy
  (ivy-mode)
  (counsel-mode)

  (ivy-rich-mode)
  )
#+END_SRC

*** Sort the result produced by =ivy= (ivy-prescient)

=prescient.el= sort the result of ivy based on their "recency" metric.

#+BEGIN_SRC emacs-lisp
(use-package ivy-prescient
  :after counsel
  :hook (emacs-startup . ivy-prescient-mode)
  :custom
  ;; save result across sessions
  (prescient-persist-mode t)

  ;; skip prescient for the following commands
  (ivy-prescient-sort-commands
   '(:not swiper
          swiper-isearch
          ivy-switch-buffer
          counsel-imenu
          org-mru-clock-in
          counsel-yank-pop
          flyspell-correct-ivy
          ))

  ;; try to retain highlighting
  (ivy-prescient-retain-classic-highlighting t)
  )
#+END_SRC

*** Use CtrlF to replace isearch

#+BEGIN_SRC emacs-lisp
(use-package ctrlf
  :bind ("C-s" . ctrlf-forward-literal)
  :bind ("C-r" . ctrlf-backward-literal)
  :bind ("C-M-s" . ctrlf-forward-regexp)
  :bind ("C-M-r" . ctrlf-backward-regexp)
)
#+END_SRC

** Combo key hints

I use =which-key= package to display a screen of hints when a key prefix is
entered.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :hook (emacs-startup . which-key-mode)
  :custom
  (which-key-idel-delay 1.5))
#+END_SRC

** Expand region (~C-=~, ~C--~, ~v =~, ~v -~)

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind (("C-=" . er/expand-region)
         ("C--" . er/contract-region))
  :custom
  (expand-region-subword-enabled t)
  (expand-region-skip-whitespace t)
  (expand-region-smart-cursor nil)

  :config
  (defun shou/er-this-expansion-is-better
      (start end best-start best-end)
    (and
     (<= (point) start)
     (> (mark) end)
     ;; amplify the candidates that selects region that are closed to point.
     (< (+ (expt (- start (point)) 2) (expt (- (mark) end) 2))
        (+ (expt (- start best-start) 2) (expt (- best-end end) 2)))
     ))


  (advice-add 'er--this-expansion-is-better
              :override 'shou/er-this-expansion-is-better)

  (defun shou/er/mark-org-heading ()
    (when (org-at-heading-p)
      (end-of-line)
      (push-mark nil t t)
      (beginning-of-line)))

  (require 'the-org-mode-expansions)
  (defun shou/er/add-org-mode-expansions ()
    (set (make-local-variable 'er/try-expand-list)
         (append
          (remove #'er/mark-defun er/try-expand-list)
          '(org-mark-subtree
            er/mark-org-element
            er/mark-org-element-parent
            er/mark-org-code-block
            er/mark-sentence
            er/mark-org-parent
            er/mark-paragraph
            shou/er/mark-org-heading
            )))
    (set (make-local-variable 'er/save-mode-excursion)
         #'er/save-org-mode-excursion))

  (er/enable-mode-expansions 'org-mode 'shou/er/add-org-mode-expansions)

  ;; mainly for qualified names like "Struct::method".
  (require 'cc-mode-expansions)
  (er/enable-mode-expansions 'rust-mode 'er/add-cc-mode-expansions)
  )
#+END_SRC

** Writing prose
*** Markdown format support

- Associate =.md= files with the mode
- Use =pandoc= to render the result (please ensure it

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands gfm-mode
  :mode (("\.md$" . gfm-mode)
         ("\.markdown$" . gfm-mode))
  :config
  (when (executable-find "pando")
    (setq-default markdown-command "pandoc --standalone --mathjax --from=markdown")))
#+END_SRC

*** Define the list of text mode hooks

#+BEGIN_SRC emacs-lisp
(setq-default text-mode-hooks
              '(text-mode-hook
                markdown-mode-hook
                gfm-mode-hook
                org-mode-hook))
#+END_SRC

*** Enable spell checking

Remember to install =aspell= command line tool.

Correct word with =C-;= key.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :hook ((git-commit-mode org-mode text-mode) . flyspell-mode)
  :hook (prog-mode . flyspell-prog-mode)
  :commands flyspell-mode
  :custom
  ;; personal dictionary
  (ispell-personal-dictionary (expand-file-name "user-dict" user-emacs-directory))

  ;; sort correction by likelihood
  (flyspell-sort-corrections t)

  ;; save to personal dictionary without confirmation
  (ispell-silently-savep t)

  ;; use aspell rather than ispell
  (ispell-program-name "/usr/local/bin/aspell")

  ;; automatically save to abbrev
  (flyspell-abbrev-p t)
  (flyspell-use-global-abbrev-table-p t)

  :config
  ;; run flyspell only on idle time to avoid performance issue
  (use-package flyspell-lazy
    :custom
    ;; check recent change after idle for 0.5 seconds
    (flyspell-lazy-idle-seconds 0.5)

    ;; check entire visible window after 10 seconds
    (flyspell-lazy-window-idle-seconds 10))

  (use-package flyspell-correct
    :bind (:map flyspell-mode-map
                ("C-;" . flyspell-correct-wrapper)))
  (use-package flyspell-correct-popup :after flyspell-correct)

  ;; enable flyspell-lazy
  (flyspell-lazy-mode 1)
  )
#+END_SRC

*** Visual line mode for text modes

#+begin_src emacs-lisp
(dolist (hook '(org-mode-hook text-mode-hook))
  (add-hook hook 'visual-line-mode))
#+end_src

*** Set fill column for visual line mode

By default =visual-line-mode= wraps around at the edge of the frames. Which makes it difficult to read if the frame is too wide.

=visual-fill-column-mode= enhances this by enforcing the wrapping earlier.

#+begin_src emacs-lisp
(use-package visual-fill-column
  :commands visual-fill-column-mode
  :hook (emacs-startup . global-visual-fill-column-mode)

  :custom
  (visual-fill-column-width 90)
  (visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))

  :config
  (setq-default split-window-preferred-function
                'visual-fill-column-split-window-sensibly))
#+end_src

** Customize editing shortcuts
*** Transpose char (=C-t=)
#+BEGIN_SRC emacs-lisp
(defun shou/transpose-next-char ()
  (interactive)
  (save-excursion
    (forward-char)
    (transpose-chars 1)))

(bind-key "C-t" 'shou/transpose-next-char)
#+END_SRC

*** Join lines (=C-j=)

#+BEGIN_SRC emacs-lisp
(defun shou/join-line ()
  (interactive)
  (save-excursion
    (next-line)
    (delete-indentation)))
(bind-key* "C-j" 'shou/join-line)
#+END_SRC

*** Select whole line (=C-S-v=)

#+BEGIN_SRC emacs-lisp
(defun shou/mark-line ()
  (interactive)
  (when (not (region-active-p))
    (forward-line 0)
    (set-mark-command nil))
  (forward-line))
(bind-key "C-S-v" 'shou/mark-line)
#+END_SRC

** Dictionary with =C-c C-d=

#+BEGIN_SRC emacs-lisp
(use-package osx-dictionary
  :if (eq system-type 'darwin)
  :bind ("C-c C-d" . osx-dictionary-search-word-at-point))
#+END_SRC

** Multi cursor

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-<down-mouse-1>"))
(use-package multiple-cursors
  :bind (("C-x m" . mc/mark-all-dwim)
         ("C-M-SPC" . mc/mark-next-lines)
         ("C->" . mc/mark-next-like-this-symbol)
         ("C-<" . mc/unmark-next-like-this-symbol)
         ("C-M->" . mc/mark-next-like-this)
         ("C-M-<" . mc/unmark-next-like-this)
   ("M-<mouse-1>" . mc/add-cursor-on-click))
  :config (define-key mc/keymap (kbd "<return>") nil))
#+END_SRC

** Visual query replace

#+begin_src emacs-lisp
(use-package visual-regexp
  :bind (("M-%" . vr/query-replace)))
#+end_src

** Align expression

#+begin_src emacs-lisp
(use-package bind-key
  :config
  (bind-key "M-^" 'align-regexp))
#+end_src

** TRAMP

#+BEGIN_SRC emacs-lisp
(require 'tramp)
(setq tramp-default-method "scp")
#+END_SRC

** Auto-correction

#+begin_src emacs-lisp
(setq save-abbrevs 'silently)

;; auto enable abbrev mode
(setq-default abbrev-mode t)
#+end_src

* Programming
** Show column number

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'column-number-mode)
#+END_SRC

Also show a ruler at column 80.

#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :custom
  (fci-rule-column 80)

  ;; customize the look of the ruler
  (fci-rule-width 1)
  (fci-rule-use-dashes t)
  (fci-dash-pattern 0.3)

  ;; fci is incompatible with show-trailing-whitespace
  (show-trailing-whitespace nil)

  :hook (prog-mode . fci-mode))

#+END_SRC

** Show line number

=nlinum= stops working for me somehow, I have to use display-line-numbers-mode.

#+BEGIN_SRC emacs-lisp
(use-package nlinum
  :disabled
  :hook (prog-mode . nlinum-mode))

(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

** Jump to definition (=M-.=)

We use =dumb-jump=, which works out of the box for many languages.

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :bind (("M-." . dumb-jump-go-other-window)
         ("M-," . dumb-jump-go))
  :custom
  (dumb-jump-selector 'ivy)
  (dumb-jump-force-searcher 'rg))
#+END_SRC

** Enable flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :demand t
  :commands (flycheck-mode)
  :config
  ;; display pos-tip for flycheck errors
  (use-package flycheck-pos-tip)
  (flycheck-pos-tip-mode)
  )
#+END_SRC

** Highlight all occurrences word at point

#+BEGIN_SRC emacs-lisp
(use-package idle-highlight-mode
  :config
  (setq-default idle-highlight-idle-time 0.3)
  (add-hook 'prog-mode-hook 'idle-highlight-mode))
#+END_SRC

** Project management
*** Use =ripgrep= (rg)

I don't use deadgrep any more. rg + wgrep is better in terms of speed and the display is nicer.

Few shortcuts:

- press =C-c s s= to search current word
- on search window, =m= to bring up the menu (refine search, change dir, etc)
- on search window, =C-x C-q= to enable wgrep editing mode

#+BEGIN_SRC emacs-lisp
(use-package rg
  :bind (("C-c s s" . rg-dwim)
         ("C-c s p" . rg-project)
         ("C-c s r" . rg)
         :map rg-mode-map
         ("C-x C-q" . wgrep-change-to-wgrep-mode))
  :custom
  ;; find when use
  (rg-executable "rg")
  (wgrep-auto-save-buffer t)

  :config
  (defun shou/switch-to-rg-buffer (&rest args)
    (switch-to-buffer-other-window "*rg*"))
  (advice-add 'rg-run :after #'shou/switch-to-rg-buffer)
  )
#+END_SRC

*** Use =projectile= to open files within project

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :custom
  (projectile-completion-system 'ivy)
  (projectile-switch-project-action 'projectile-dired)
  (projectile-enable-caching t)
  (projectile-indexing-method 'alien)
  (projectile-globally-ignored-file-suffixes '("beam"))

  :hook (emacs-startup . projectile-mode)

  :bind-keymap
  ("M-p" . projectile-command-map)

  :config
  (setq projectile-globally-ignored-directories
        (append projectile-globally-ignored-directories
                '(".elixir_ls" "_build"))))
#+END_SRC

*** Customize project-find-functions to find multi-project vc

Let the project root to be where =mix.exs= is found. This function is used by
=eglot=.

#+BEGIN_SRC emacs-lisp
(defun shou/elixir-project-finder (dir)
  (let ((probe (locate-dominating-file dir "mix.exs")))
    (and probe (cons 'vc probe))))
(add-hook 'project-find-functions 'shou/elixir-project-finder)
#+END_SRC

** Code folding

I use =yafolding= to fold structured code.

I didn't use =origami.el= because it handles languages like js/json terribly. =yafolding,= on the other hand, is based on indentation alone. This means as long as the document is well-indented, =yafolding= is able to fold correctly.

#+begin_src emacs-lisp
(use-package yafolding
  :hook (prog-mode . yafolding-mode))
#+end_src

** Auto complete parentheses

I use =smartparens= package for the purpose.

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :hook (prog-mode . smartparens-mode)
  :bind (:map smartparens-mode-map
              ;; ((a|) b) => ((a| b))
              ("M-L" . sp-forward-slurp-sexp)
              ;; ((a| b)) => ((a|) b)
              ("M-H" . sp-forward-barf-sexp)
              ;; (a (|b)) => ((a |b))
              ("M-S-h" . sp-backward-slurp-sexp)
              ;; ((a |b)) => (a (|b))
              ("M-S-l" . sp-backward-barf-sexp)
              ;; ((a|) b) => (a| b)
              ("M-j" . sp-splice-sexp)

              ;;
              ("M-<right>" . sp-next-sexp)
              ;;
              ("M-<left>" . sp-previous-sexp))
  :config
  (require 'smartparens-config)
  (sp-local-pair 'haskell-mode "'" nil :actions nil))
#+END_SRC

** Git
*** Use =magit= to show git status

I use =magit= to show git status.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit)
  ("C-x C-g" . magit-file-dispatch)

  :demand t
  :after projectile

  :custom
  ;; https://twitter.com/iLemming/status/1243322552828571649
  (magit-save-repository-buffers 'save-all-and-dont-ask)

  :config
  ;; so it don't close other windows
  (fset 'magit-restore-window-configuration (lambda (x) (kill-buffer-and-window)))
  ;; automatically refresh after saving a file
  ;;
  ;; Edit: I turned it off as it makes editing a bit laggy. Now please
  ;; press 'g' manually to refresh.
  ;;
  ;; (add-hook 'after-save-hook 'magit-after-save-refresh-status t)

  ;; do not override projectile keys
  (unbind-key "M-p" magit-status-mode-map)
  (unbind-key "M-n" magit-status-mode-map)

  ;; do not show list of tags to faster
  (remove-hook 'magit-refs-sections-hook 'magit-insert-tags)
)
#+END_SRC

*** Use =forge= for online features

Hotkey to remember:

| C-c C-o | forge-browse-topic |

#+BEGIN_SRC emacs-lisp
(use-package forge
  :after magit)
#+END_SRC


*** Browse current file on GitHub

#+BEGIN_SRC emacs-lisp
(use-package browse-at-remote
  :bind (("C-c g g" . browse-at-remote)
         ("C-c g G" . browse-at-remote-kill)
         ;; mimic "open-at-point" behaviour
         ("C-c C-o" . browse-at-remote)))
#+END_SRC


*** Git time machine

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :commands git-timemachine)
#+END_SRC

*** Follow symbolic links without warning

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

*** Use =delta= to show better diff

Delta supports highlighting language-syntax, within-line diff, etc.

Install delta with the instruction here: https://github.com/dandavison/delta

#+begin_src emacs-lisp
(use-package magit-delta
  :hook (magit-mode . magit-delta-mode))
#+end_src

** Search symbol at point in Dash with =C-c d=

#+BEGIN_SRC emacs-lisp
(use-package dash-at-point
  :if (eq system-type 'darwin)
  :bind (:map prog-mode-map
              ("C-c d" . dash-at-point))
  :ensure-system-package
  ("/Applications/Dash.app" . "brew cask install dash"))
#+END_SRC

** Auto completion (=M-/=)
*** Completion engine

Use =company-mode= for auto completion.

#+BEGIN_SRC emacs-lisp
(use-package company
  :bind ("M-/" . company-complete)
  :hook (emacs-startup . global-company-mode)

  :custom
  (company-idle-delay 0.1 "Show completion with a small delay")
  (company-show-numbers t "Number the candidates (use M-1, M-2 etc to select completions)")
  (company-tooltip-align-annotations t)
  (company-dabbrev-code-everywhere t)

  :config
  ;; only enable these options
  (setq company-backends
        '(company-capf company-dabbrev-code company-files))

  (define-key company-active-map (kbd "TAB")
    (lambda () (interactive) (company-complete-common-or-cycle +1)))
  (define-key company-active-map (kbd "S-TAB")
    (lambda () (interactive) (company-complete-common-or-cycle -1))))
#+END_SRC

*** TabNine

Use =TabNine= for general text completion. Please remember to run
=(company-tabnine-install-binary)= after first install.

#+BEGIN_SRC emacs-lisp
(use-package company-tabnine
  ;; use my own build with async enabled
  :straight (:host github :repo "shouya/company-tabnine")
  :if (eq system-type 'darwin)
  :after company
  :custom
  (company-tabnine-log-file-path "~/tmp/tabnine.log")
  (company-tabnine-executable-args '("--log-level" "Trace"))
  :config
  (setq company-backends
        (append company-backends '(company-tabnine))))

(defun shou/tabnine-off ()
  "turn off TabNine for this buffer"
  (interactive)
  (setq-local company-backends (delete 'company-tabnine company-backends)))


(defun shou/tabnine-on ()
  "turn on TabNine for this buffer"
  (interactive)
  (setq-local company-backends (add-to-list 'company-backends 'company-tabnine)))
  #+END_SRC

*** Company completion

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :hook (company-mode-hook . company-quickhelp-mode)
  :after company
  :custom (company-quickhelp-delay 0.2)
)
#+END_SRC

*** Company completion icons on GUI

#+BEGIN_SRC emacs-lisp
(use-package company-box
  :disabled
  :init (require 'icons-in-terminal)
  :if (display-graphic-p)
  ;:disabled
  :hook (company-mode . company-box-mode)
  :config

  (setq-default company-box-enable-icon t)
  (setq-default company-box-icons-unknown 'fa_question_circle)

  (setq-default company-box-icons-elisp
                '((fa_tag :face font-lock-function-name-face) ;; Function
                  (fa_cog :face font-lock-variable-name-face) ;; Variable
                  (fa_cube :face font-lock-constant-face)     ;; Feature
                  (md_color_lens :face font-lock-doc-face)))  ;; Face

  (setq-default company-box-icons-yasnippet 'fa_bookmark))
#+END_SRC

*** Company completion pop up on CLI

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :if (not (display-graphic-p))
  :after company
  :hook (company-mode . company-quickhelp-mode))
#+END_SRC

*** Yasnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :commands (yas-global-mode yas-minor-mode)
  :hook (emacs-startup . yas-global-mode)

  :config
  (setq-default yas-snippet-dirs
                `(,(expand-file-name "snippets" user-emacs-directory)))
  (yas-reload-all))
#+END_SRC

*** Spport Language Server Protocols (LSP)

**** LSP mode

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-mode lsp-deferred)
  :bind (:map lsp-mode-map
              ("C-c C-f" . lsp-format-buffer))

  ;; so it can be registered
  :config
  (use-package lsp-treemacs)

  ;; exclude watch files for elixir projects
  (add-to-list 'lsp-file-watch-ignored "[/\\\\]\\.elixir_ls")
  (add-to-list 'lsp-file-watch-ignored "\\.beam\\'")
  (add-to-list 'lsp-file-watch-ignored "[/\\\\]_build\\'")
  (add-to-list 'lsp-file-watch-ignored "[/\\\\]deps\\'")

  (add-hook 'lsp-mode-hook 'lsp-enable-which-key-integration)

  ;; conflict with projectile prefix
  (unbind-key "M-p" lsp-signature-mode-map)
  ;; unbind it as well as I never bother using it.
  (unbind-key "M-n" lsp-signature-mode-map)

  :custom
  ;; performance tuning
  (read-process-output-max (* 1 1024 1024)) ;; 20mb

  ;; only sort by position
  (lsp-imenu-sort-methods '(position kind name))
  (lsp-imenu-show-container-name t)
)
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24591 63835 379792 0) :init (24591 63835 379706 0) :init-secs (0 0 8949 0) :use-package-secs (0 1 984825 0) :config (24591 63835 379701 0) :config-secs (0 0 8937 0)))

*** Formatting code with apheleia

#+BEGIN_SRC emacs-lisp
(use-package apheleia
  :straight (:host github :repo "raxod502/apheleia")
  :config
  (add-to-list 'apheleia-formatters '(mix . ("mix" "format" "-")))
  (add-to-list 'apheleia-formatters '(prettier . (npx "prettier" "--stdin-filepath" filepath)))

  (add-to-list 'apheleia-mode-alist '(elixir-mode . mix))

  (apheleia-global-mode t)
  )
#+END_SRC

** Compile mode configurations

#+begin_src emacs-lisp
(setq compilation-scroll-output 'first-error)

;; colorize using ansi color
(require 'ansi-color)
(add-hook 'compilation-filter-hook
          (lambda ()
            (let ((inhibit-read-only t))
              (ansi-color-apply-on-region compilation-filter-start (point)))))
#+end_src

** Languages
*** Lisps
**** Use =paredit= in lisp modes to balance parentheses

I customized several bindings because "C-<left>/<right>" is bound to
"previous/next desktop" on my macOS.

#+BEGIN_SRC emacs-lisp
(use-package paredit
  :bind (:map paredit-mode-map
              ;; ((a|) b) => ((a| b))
              ("M-<right>" . paredit-forward-slurp-sexp)
              ;; ((a| b)) => ((a|) b)
              ("M-<left>" . paredit-forward-barf-sexp)
              ;; (a (|b)) => ((a |b))
              ("M-S-<left>" . paredit-backward-slurp-sexp)
              ;; ((a |b)) => (a (|b))
              ("M-S-<right>" . paredit-backward-barf-sexp)
              ;; ((a|) b) => (a| b)
              ("M-<down>" . paredit-splice-sexp)
              ;; (|a b) => ((a) b)
              ("M-<up>" . paredit-wrap-sexp)
              ;; (|a b) => ((a) b)
              ("M-(" . paredit-wrap-round)))
#+END_SRC

**** Use =rainbow-delimiters=

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC

**** Enable above two modes for all lisp languages

#+BEGIN_SRC emacs-lisp
(setq lispy-mode-hooks
      '(clojure-mode-hook
        emacs-lisp-mode-hook
        lisp-mode-hook
        scheme-mode-hook))

(dolist (hook lispy-mode-hooks)
  (add-hook hook
            (lambda ()
              (paredit-mode)
              (rainbow-delimiters-mode))))
#+END_SRC

**** Shorten =Emacs lisp= into =Elisp= in mode name

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook (lambda () (setq-default mode-name "Elisp")))
#+END_SRC

**** Use =eldoc= to display documentation

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :config
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode))
#+END_SRC

**** Highlight info documentations

Colorize function names/arguments in info documentations.

#+BEGIN_SRC emacs-lisp
(use-package info-colors
  :config (add-hook 'Info-selection-hook 'info-colors-fontify-node))
#+END_SRC

*** Elixir
**** Use =elixir-mode= for highlighting

#+BEGIN_SRC emacs-lisp
(use-package elixir-mode
  :mode (("\\.exs\\'" . elixir-mode)
         ("\\.ex\\'" . elixir-mode))

  ;; Format with C-c C-f
  :bind (:map elixir-mode-map ("C-c C-f" . elixir-format))
  :hook (elixir-mode . lsp)

  :config
  ;; we don't enable eglot's auto completion functionality
  (add-hook 'elixir-format-hook
            (lambda ()
              (if (projectile-project-p)
                  (setq elixir-format-arguments
                        (list "--dot-formatter"
                              (concat (locate-dominating-file buffer-file-name ".formatter.exs") ".formatter.exs")))
                (setq elixir-format-arguments nil)))))

  ;;; The original elixir syntax table is a bit awkward. I changed it
  ;;; a little so things like symbol highlighting works a bit better.
  ;;
  ;; original: https://github.com/elixir-editors/emacs-elixir/blob/master/elixir-smie.el#L80
  ;(modify-syntax-entry ?: "_" elixir-mode-syntax-table) ; make : a punctuation (was symbol)
  ;(modify-syntax-entry ?@ "." elixir-mode-syntax-table) ; make @ a punctuation (was symbol)
  ;(modify-syntax-entry ?& "." elixir-mode-syntax-table) ; make & a punctuation (was symbol)
  ;(modify-syntax-entry ?? "_" elixir-mode-syntax-table) ; make ? a symbol (was word)
  ;(modify-syntax-entry ?~ "_" elixir-mode-syntax-table) ; make ~ a punctuation (was word)
#+END_SRC

**** Run ExUnit
#+BEGIN_SRC emacs-lisp
(use-package exunit
  :after elixir-mode
  :bind (:map elixir-mode-map
              ("C-c C-t C-t" . exunit-verify-single)
              ("C-c C-t C-v" . exunit-verify)
              ("C-c C-t C-a" . exunit-verify-all))
  :custom (exunit-environment '("MIX_ENV=test")))
#+END_SRC

**** Alchemist

Press 'g' in compile mode to rerun last command (original 'r').

#+begin_src emacs-lisp
(use-package alchemist
  :after elixir-mode
  :hook (elixir-mode . alchemist-mode)

  :bind (:map alchemist-mode-map
              ("C-c C-c C-c" . alchemist-mix-compile)
              ("C-c C-c C-t" . alchemist-mix-test)
         :map alchemist-mix-mode-map
              ("g" . alchemist-mix-rerun-last-task))

  :init
  (setq alchemist-key-command-prefix (kbd "C-c C-a"))

  :custom
  (alchemist-mix-env "test")

  :config
  ;; conflicts with dumb-jump-go
  (unbind-key "M-." alchemist-mode-map)
  (unbind-key "M-," alchemist-mode-map)
  )
#+end_src

*** Protobuf

Simply install protobuf mode. Default settings should work.

#+BEGIN_SRC emacs-lisp
(use-package protobuf-mode
  :commands protobuf-mode
  :mode "\\.proto\\'"
  :mode "\\.proto3\\'")
#+END_SRC

*** JSON

Install JSON mode.

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :commands json-mode
  :mode "\\.json\\'")
#+END_SRC

Reformatting JSON.

#+BEGIN_SRC emacs-lisp
(use-package json-reformat
  :after json-mode
  :functions json-reformat-format
  :custom (json-reformat:indent-width 2)
  :config
  (define-key json-mode-map (kbd "M-F")
    (lambda () (interactive) (mark-whole-buffer) (json-reformat-format))))
#+END_SRC

*** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :mode "\\.rs\\'"
  :custom
  (rust-rustfmt-bin "~/.cargo/bin/rustfmt")
  (rust-cargo-bin "~/.cargo/bin/cargo")

  ;; do not show a buffer for format errors
  (rust-format-show-buffer nil)

  ;; set default indent size to 2. Actual indent size will be auto-detected
  (rust-indent-offset 2)

  :config
  ;; quick way to run cargo commands (C-c C-c prefix)
  (use-package cargo
    :custom
    (cargo-process--enable-rust-backtrace t)

    :config
    (add-hook 'cargo-process-mode-hook 'visual-line-mode))

  ;; enable LSP for type info and more
  (add-hook 'rust-mode-hook 'eglot-ensure)
  (add-hook 'rust-mode-hook 'cargo-minor-mode)
  )
#+END_SRC

*** Shell

#+BEGIN_SRC emacs-lisp
(add-hook 'sh-mode-hook
          (lambda ()
            ;; to use shellcheck as lint software
            (flycheck-mode)
            ;; these variables sometimes get reset when opening a shell file, so
            ;; I manually set them here.
            (setq sh-basic-offset 2
                  sh-indentation 2)))
#+END_SRC

*** Dockerfile

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile")
(use-package docker-compose-mode
  :mode "docker-compose\\.ya?ml"
  :mode "fig\\.ya?ml")
#+END_SRC

*** Terraform

#+BEGIN_SRC emacs-lisp
(use-package terraform-mode
  :mode "\\.tf\\'")
#+END_SRC

*** Web

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode "\\.html\\'")
#+END_SRC

*** Systemd unit files

#+BEGIN_SRC emacs-lisp
(use-package systemd
  :if (eq 'system-type 'gnu/linux)
  :mode (("\\.service\\'" . systemd-mode)
         ("\\.timer\\'" . systemd-mode)
         ("/etc/systemd/.*\\.conf\\'" . systemd-mode)))
#+END_SRC

*** Ansible

#+BEGIN_SRC emacs-lisp
(defun ansible-vault-mode-maybe ()
  (when (ansible-vault--is-vault-file)
    (ansible-vault-mode 1)))

(use-package ansible-vault
  :commands (ansible-vault--is-vault-file ansible-vault-mode)
  :hook (yaml-mode . ansible-vault-mode-maybe))

(use-package jinja2-mode
  :mode ("\\.hs\\'" . jinja2-mode))
#+END_SRC

*** Haskell

**** Haskell mode

I use haskell mode for syntax highlighting, indentation, and a variety of
project related functionalities.

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :bind (:map haskell-mode-map
              ("C-c C-c" . haskell-compile)
              ("C-c `" . haskell-interactive-bring)
              ("C-c C-l" . haskell-process-load-or-reload)
              ("C-c C-t" . haskell-process-do-type)
              ("C-c C-i" . haskell-process-do-info)
              ("M-." . haskell-mode-jump-to-def))
  :mode (("\\.hs\\'" . haskell-mode))
  :custom
  ;; build with "stack build"
  (haskell-compile-cabal-build-command "stack build")
  ;; do not show error in a popup window
  (haskell-interactive-popup-errors nil)
  ;; show logs
  (haskell-process-log t)
  ;; auto load imports
  (haskell-process-auto-import-modules t)
)
#+END_SRC

**** LSP

#+begin_src emacs-lisp
(use-package lsp-haskell
  :hook (haskell-mode . lsp)
  :hook (haskell-literate-mode . lsp))
#+end_src

*** Idris

#+BEGIN_SRC emacs-lisp
(use-package idris-mode
  :after popwin
  :mode (("\\.idr\\'" . idris-mode))
  :config
  (add-to-list 'popwin:special-display-config 'idris-compiler-notes-mode)
  (add-to-list 'popwin:special-display-config
               '(idris-info-mode :stick t))
  (add-to-list 'popwin:special-display-config
               '(idris-repl-mode :height 0.2
                                 :noselect nil
                                 :position bottom
                                 :stick t)))
#+END_SRC

*** Python

#+begin_src emacs-lisp
(with-eval-after-load 'python-mode
  (setq python-shell-completion-native-enable nil))
#+end_src

*** Kubernetes

#+begin_src emacs-lisp
(use-package k8s-mode
  :defer t
  :hook (k8s-mode . yas-minor-mode))
#+end_src

*** JavaScript

#+begin_src emacs-lisp
(use-package js2-mode
  :mode "\\.js\\'"
  :hook (js2-mode . lsp)
  :config
  (setq-default js2-indent-level 2)
  (setq-default js2-basic-offset 2)
  (unbind-key "C-c C-f" js2-mode-map)
  )
#+end_src

*** PHP

#+begin_src emacs-lisp
(use-package php-mode :mode "\\.php\\'")
#+end_src

* org mode

#+BEGIN_SRC emacs-lisp
(use-package org
  :commands (org-mode)
  :mode ("\\.org\\'" . org-mode))
#+END_SRC
** Set org directory

#+BEGIN_SRC emacs-lisp
(if (eq system-type 'darwin)
  (setq-default org-directory "~/Documents/org")
  (setq-default org-directory "~/org"))

(defun org-file-path (filename)
  "Return the path of file inside org-directory"
  (expand-file-name filename org-directory))

(use-package org
  :custom (org-default-notes-file (org-file-path "notes.org")))
#+END_SRC

** Behavior tweaks


#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  ;; for org-indent-mode
  (org-indent-indentation-per-level 1)
  ;; do not automatically ident based on heading
  (org-adapt-indentation nil)

  ;; make TAB acts as in major mode
  (org-src-tab-acts-natively t)

  ;; Avoid inadvertent text edit in invisible area
  (org-catch-invisible-edits 'show-and-error)

  ;; Hide empty lines between subtrees in collapsed view
  (org-cycle-separator-lines 0)

  ;; use these set of bullets
  (org-list-demote-modify-bullet '(("+" . "-") ("-" . "+")))

  ;; increase the depth that imenu can reach
  (org-imenu-depth 3)

  :config
  ;; We enable org-indent-mode to make contents align with their settings
  (add-hook 'org-mode-hook 'org-indent-mode)

  ;; add company completion backend
  (defun add-org-completion-backend ()
    (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))
  (add-hook 'org-mode-hook 'add-org-completion-backend)

  ;; do not insert blank line after new list items on M-Ret
  (setcdr (assoc 'plain-list-item org-blank-before-new-entry) nil)
  )
#+END_SRC

Reference: [[https://yiufung.net/post/org-mode-hidden-gems-pt1/#avoid-inadvertent-text-edit-in-invisible-area][Org-mode Hidden Gems - 01 Document Structure]]

** Visual Tweaks
*** Turn on native source fontification in org buffer

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-src-fontify-natively t))
#+END_SRC

*** Fancy bullet headers

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode))
#+END_SRC

*** Hide leading stars

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-hide-leading-stars t))
#+END_SRC

*** Hide mark-up symbols

I'd like to hide ===, =+=, =*= symbols when not necessary.

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-hide-emphasis-markers t))
#+END_SRC

*** Customize wrap around symbol

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-hide-emphasis-markers t))
(setq-default org-ellipsis " ⤵")
#+END_SRC

** Source editing
*** Do not add indentation from org-src-edit

See [[https://emacs.stackexchange.com/questions/18877/how-to-indent-without-the-two-extra-spaces-at-the-beginning-of-code-blocks-in-or][reference]].

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-src-strip-leading-and-trailing-blank-lines t)
  (org-src-preserve-indentation t))
#+END_SRC

*** Use the same window for org-src-edit

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-src-window-setup 'current-window))
#+END_SRC

*** Include emacs-lisp src quickly

#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (dolist (shortcut (list '("el" . "src emacs-lisp")
                          '("sc" . "src scheme :session :results list")))
    (add-to-list 'org-structure-template-alist shortcut))

  (require 'org-tempo))
#+END_SRC

** To-do settings
*** Log down time when marking an item "DONE"

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-log-done 'time)
  (org-log-into-drawer t))
#+END_SRC
*** Customize TODO colors

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-log-done 'time)
  (org-log-into-drawer t)
  (org-todo-keyword-faces
   '(("TODO" . "#a6b255")
     ("IN-PROG" . "#f2f9c1")
     ("TOREAD" . "#879434")
     ("WAIT" . "#c07993"))))
#+END_SRC
*** Enforce todo dependencies

Make todos respect blocking state.

#+begin_src emacs-lisp
(use-package org
  :config
  ; (setq org-enforce-todo-dependencies t)
  (setq org-agenda-dim-blocked-tasks 'invisible))
#+end_src

** Taking note with =deft=

=deft.el= provides National Velocity-like note browsing and editing experience.

#+BEGIN_SRC emacs-lisp
(use-package deft
  :bind ("C-M-n" . deft)
  :commands (deft)
  :custom
  (deft-extensions '("org" "txt" "md" "markdown"))
  (deft-directory (org-file-path "random"))
  (deft-default-extension "org" "use org as default format")
  (deft-recursive t "search recursively")
  (deft-use-filename-as-title t)
  (deft-use-filter-string-for-filename t "instead of some generated gibberish")
  (deft-auto-save-interval 60
    "don't auto save as it will reformat in middle of typing")
  (deft-file-naming-rules
    '((noslash . "-")
      (nospace . "-")
      (case-fn . downcase))
    "apply certain rules when generating file name")
  )
#+END_SRC

** Org protocol

#+begin_src emacs-lisp
(require 'org-protocol)
#+end_src

** Anki deck

#+BEGIN_SRC emacs-lisp
(defun shou/interactive-push-anki-notes ()
  (interactive)
  (when (and (eq major-mode 'org-mode)
             (not (equal "anki-cards-archive" (f-base buffer-file-name)))
             (> (length (anki-editor-map-note-entries t nil 'file)) 0)
             (yes-or-no-p "Push cards to Anki?"))
    (let ((progress-reporter
           (make-progress-reporter "Pushing cards to Anki..." nil nil)))
      (anki-editor-push-notes)
      (progress-reporter-done progress-reporter))))

(use-package anki-editor
  :disabled
  :after org
  :commands (anki-editor-push-notes
             anki-editor-map-note-entries
             anki-editor-insert-note
             anki-editor-mode)
  :hook (before-save . shou/interactive-push-anki-notes)
  :custom
  (anki-editor-org-tags-as-anki-tags t)
  (anki-editor-protected-tags '("marked" "leech" "relearn-experiment"))
  :config
  (setq anki-editor--ox-anki-html-backend 'ascii))
#+END_SRC

** Agenda
*** Use =C-c a= to enter agenda mode

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind ("C-c a" . org-agenda))
#+END_SRC

*** Set agenda files

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-agenda-files (list (org-file-path "projects.org")
                          (org-file-path "mencti.org"))))
#+END_SRC

*** Extend toady to 6:00am into next morning

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-extend-today-until 3)
  (org-use-effective-time t))
#+END_SRC

*** Agenda view

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  ;; show agenda on the same window I launched it, otherwise it destroys my dedicated window setting
  (org-agenda-window-setup 'current-window)
  ;; do not start on weekdays
  (org-agenda-start-on-weekday nil)
  ;; do not show repeating items in future timeline
  (org-agenda-show-future-repeats t)

  (org-agenda-sorting-strategy
   '((agenda category-keep habit-up priority-down todo-state-up time-up)
     (todo priority-down category-keep)
     (tags priority-down category-keep)
     (search priority-down category-keep)))

  (org-agenda-compact-blocks t)

  (org-agenda-span 'day)

  ;; skip filename as it takes up precious space and useless
  (org-agenda-prefix-format '((agenda . " %i  %?-12t% s")
                              (todo . " %i %-12:c")
                              (tags . " %i %-12:c")
                              (search . " %i %-12:c")))

  (org-agenda-custom-commands
   '(("d" "Daily agenda"
      ((agenda "" ((org-agenda-span 'day)))
       (todo "IN-PROG")))

     ("w" "Today's work agenda"
      ;; Please note that tags must go earlier than agenda, otherwise
      ;; a weird bug would invalidate the effect of org-agenda-tag-filter-preset
      ((tags "WORK/IN-PROG")
       (agenda "" ((org-agenda-span 'day)
                   (org-agenda-tag-filter-preset '("+WORK"))))))

     ("p" "Today's personal agenda"
      ((tags "PERSONAL/IN-PROG")
       (agenda "" ((org-agenda-span 1)
                   (org-agenda-tag-filter-preset '("+PERSONAL"))))))

     ("s" "Schedule view"
      ((tags "WORK/TODO"
             ((org-agenda-overriding-header "Work")
              (org-agenda-skip-function
               '(org-agenda-skip-entry-if 'scheduled 'deadline))))
       (tags "PERSONAL/TODO"
             ((org-agenda-overriding-header "Personal")
              (org-agenda-skip-function
               '(org-agenda-skip-entry-if 'scheduled 'deadline))))

       (tags "MENCTI/TODO"
             ((org-agenda-overriding-header "Mencti")
              (org-agenda-skip-function
               '(org-agenda-skip-entry-if 'scheduled 'deadline))))
       ))
     )))
#+END_SRC

*** org-ql

#+begin_src emacs-lisp
(use-package org-ql
  :after org
  :custom
  (org-ql-views '(("Archive view"
                   :buffer-files (org-file-path "projects.org")
                   :query (closed :to -30)
                   :sort (scheduled)
                   :title "To archive: projects.org")
                  )))
#+end_src
*** Enable habit

#+BEGIN_SRC emacs-lisp
(use-package org
  :init
  (require 'org-habit)

  :custom
  (org-habit-graph-column 60)
  (org-habit-preceding-days 14)
  (org-habit-following-days 3)

  :config
  ;; clear out the face set by current theme, the default is good enough.
  (custom-theme-set-faces
   shou/current-theme
   '(org-habit-alert-face)
   '(org-habit-ready-face)
   '(org-habit-clear-face)
   '(org-habit-overdue-face)
   '(org-habit-alert-future-face)
   '(org-habit-clear-future-face)
   '(org-habit-ready-future-face)
   '(org-habit-overdue-future-face)))
#+END_SRC
*** Auto save

#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (add-hook 'org-mode-hook 'auto-save-mode))
#+END_SRC


#+END_SRC

*** Customize face

Basically restoring the default face.

#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (custom-theme-set-faces
   shou/current-theme
   '(org-scheduled-previously)
   '(org-upcoming-deadline)
   '(org-agenda-dimmed-todo-face)
   '(org-scheduled-today)
   '(org-scheduled)
   '(org-agenda-clocking)
   '(org-agenda-date-today)
   '(org-tag-faces)
   '(org-agenda-done)
   '(org-agenda-date)
   '(org-agenda-date-weekend)
   ))



#+END_SRC



** Archiving

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-archive-location (concat (org-file-path "archive.org") "::* From %s"))
  :config
  ;; save archive automatically
  (advice-add 'org-archive-default-command :after #'org-save-all-org-buffers))
#+END_SRC


** Capturing
*** Use =org-clip-link= to insert title automatically

#+BEGIN_SRC emacs-lisp
(use-package org-cliplink
  :after org
  :commands (org-cliplink org-cliplink-capture)
  :bind ("C-c C-S-l" . org-cliplink))
#+END_SRC

*** Use =C-c c= for capturing

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind ("C-c c" . org-capture))
#+END_SRC

*** Capture templates

#+BEGIN_SRC emacs-lisp
(use-package org
  :init
  (defun shou/org-select-project ()
    "Prompt for a location to select a headline"
    (interactive)
    (let* ((all-headings (-map 'car (org-refile-get-targets "projects.org")))
           (filtered-headings (--remove (member it '("Chore")) all-headings))
           (choice (completing-read "Select project: " filtered-headings)))
      (s-concat "::" choice)))

  :custom
  (org-capture-templates
   `(("w" "Work" entry (file+headline "projects.org" "Work")
      "* TODO %^{Task (Work)}\nAdded: %U\n\n%?")
     ("p" "Personal" entry (file+headline "projects.org" "Personal")
      "* TODO %^{Task (Personal)}\nAdded: %U\n\n%?")
     ("v" "Video (<15 min)" entry (file+headline "mencti.org" "Videos (Short)")
      "* TODO %(org-cliplink-capture) %^g\nAdded: %U\n\n%?")
     ("V" "Video (>15 min)" entry (file+headline "mencti.org" "Videos (Long)")
      "* TODO %(org-cliplink-capture) %^g\nAdded: %U\n\n%?")
     ("a" "Article" entry (file+headline "mencti.org" "Articles")
      "* TODO %(org-cliplink-capture) %^g\n:PROPERTIES:\n:Effort: %^{prompt|0:10|0:30|1:00|2:00}\n:END:\nAdded: %U\n\n%?"
      )
     ("d" "Day planning" plain (file+olp+datetree "plan.org")
      ,(concat "Added: %U\n"
               "gunka:\n- [ ]%?\n- [ ]\n"
               "cilre:\n- [ ]\n- [ ]\n"
               "chore:\n- [ ] vocab\n- [ ] diary\n- [ ] email\n"
               "sevzi:\n- [ ]\n"
               "mencti:\n- [ ]\n"
               )
      :time-prompt t
      :immediate-finish t
      :jump-to-captured t)
     ))
  )
#+END_SRC

*** Refile

#+begin_src emacs-lisp
(use-package org
  :custom
  (org-refile-targets '(("projects.org" . (:maxlevel . 9))
                        ("mencti.org" . (:level . 1))
                        ))

  ;; refile in one go
  (org-outline-path-complete-in-steps nil)

  ;; show full path
  (org-refile-use-outline-path 'file)
  )
#+end_src

** Clocking
*** Clocking to "CLOCKING" drawer

I like clocking info to be in a separate drawer from "LOGBOOK" to avoid mixing with
 state change logs.

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-clock-into-drawer "CLOCKING"))
#+END_SRC

*** Resolving idle time and continuous clocking

If I've been idle for 15 minutes while clocking, notify me what to do with
the clock.

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-clock-idle-time 15))
#+END_SRC

*** Switch task's TODO status when clocking in/out

This section configures the following mechanisms:

- when clock in, automatically change TODO to IN-PROG (1)
- when changing TODO to IN-PROG, automatically clock in (2)
- when changing IN-PROG to DONE, automatically clock out (3)

[[http://doc.norang.ca/org-mode.html#sec-9-1][Org Mode - Organize Your Life In Plain Text!]]

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  ;; (1)
  ; (org-clock-in-switch-to-state 'shou/clock-in-to-in-prog)
  ;; (3)
  (org-clock-out-when-done t)

  :config
  (defun shou/auto-clock-in ()
    "Automatically clock in if current task is changing to IN-PROG state"
    (when (member org-state '("IN-PROG"))
      (org-clock-in)
      (message "State changed to IN-PROG, automatically clocking in")))

  (defun shou/clock-in-to-in-prog (_)
    "Switch a task from TODO to IN-PROG when clocking in"
    (when (member (org-get-todo-state) '("TODO")) "IN-PROG"))
  ;; (2)
  (add-hook 'org-after-todo-state-change-hook 'shou/auto-clock-in))
#+END_SRC


*** Resume clocking on Emacs restart

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-clock-persist t)
  :config
  (org-clock-persistence-insinuate))
#+END_SRC

*** Include current clocking task in reports

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-clock-report-include-clocking-task t))
#+END_SRC

*** Delete clock time of zero duration

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-clock-out-remove-zero-time-clocks t))
#+END_SRC

*** Secretaria: Clocking task Reminder

#+begin_src emacs-lisp
(use-package secretaria
  :after org
  :custom
  ;; remind me about every 10 minutes
  (secretaria-clocked-in-reminder-every-minutes 10)
  (secretaria-today-unknown-time-appt-remind-every 10)
  )
#+end_src

*** Pomodoro timer

#+BEGIN_SRC emacs-lisp
(use-package org-pomodoro
  :after org
  ; :init
  ; (evil-define-key 'motion org-agenda-mode-map (kbd "P") 'org-pomodoro)
  :bind
  (("C-c C-x C-p" . org-pomodoro)
   :map org-mode-map
   ("C-c C-x C-p" . org-pomodoro))
  :custom
  (org-pomodoro-format "Pomo %s")
  (org-pomodoro-short-break-format "Break %s")
  (org-pomodoro-long-break-format "Long break %s")
  (org-pomodoro-start-sound-p t)
  (org-pomodoro-ticking-sound-p t)
  (org-pomodoro-ticking-sound-states '(:pomodoro))
  (org-pomodoro-ticking-frequency 1)
  :config
  ;; automatically start next pomo after a break
  (add-hook 'org-pomodoro-break-finished-hook (lambda () (interactive) (org-pomodoro '(16)))))
#+END_SRC

*** org-mru-clock

#+BEGIN_SRC emacs-lisp
(use-package org-mru-clock
  :bind (("C-c C-x C-j" . org-clock-goto)
         ("C-c C-x C-o" . org-clock-out)
         ("C-c C-x C-i" . org-clock-in)
         ("C-c C-x C-k" . org-mru-clock-in)
         ("C-c C-x C-x" . org-clock-in-last))
  :custom
  (org-mru-clock-how-many 100)
  (org-mru-clock-keep-formatting t)
  (org-mru-clock-predicate nil))

#+END_SRC

*** Show clock in frame title

Ref: [[https://lists.gnu.org/archive/html/emacs-orgmode/2012-02/msg00854.html][Re: {O} Clocking time in frame title bar]]

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-clock-clocked-in-display 'both))
#+END_SRC


*** Mark clocking task as done
:PROPERTIES:
:ID:       EEA9B2F1-4CE8-4D24-A0CB-4758E2CAF724
:END:

#+BEGIN_SRC emacs-lisp
(defvar shou/previously-clocking '())

(defun shou/temporarily-clock-out ()
  (interactive)
  (save-window-excursion
    (if (org-clocking-p)
        (progn
          (org-clock-goto)
          (add-to-list 'shou/previously-clocking
                       (cons org-clock-heading (org-id-get-create)))
          (org-clock-out))
      (message "No clock is active now.")
      )))

(defun shou/mark-clocking-task-as-todo-and-clock-out ()
  (interactive)
  (save-window-excursion
    (if (org-clocking-p)
        (progn
          (org-clock-goto)
          (add-to-list 'shou/previously-clocking
                       (cons org-clock-heading (org-id-get-create)))
          (org-todo 'todo)
          (org-clock-out)
          (save-buffer))
      (message "No clock is active now."))))

(defun shou/resume-previous-clock (id)
  (interactive)
  (save-window-excursion
    (org-id-goto id)
    (org-clock-in)
    (shou/remove-previous-clock id)))

(defun shou/remove-previous-clock (id)
  (when (not (null id))
    (setq shou/previously-clocking
          (--remove (s-equals? id (cdr it)) shou/previously-clocking))))

(defun shou/mark-clocking-task-as-done ()
  "Find current clocking task and mark it as done."
  (interactive)
  (save-window-excursion
    (if (org-clocking-p)
        (progn
          (org-clock-goto)
          (org-todo 'done)
          (shou/remove-previous-clock (org-id-get))
          (save-buffer))
      (message "No clock is active now."))))

(bind-key "C-c C-x C-d" 'shou/mark-clocking-task-as-done)
(bind-key "C-c C-x C-d" 'shou/mark-clocking-task-as-done org-mode-map)
#+END_SRC

** Presentation

#+BEGIN_SRC emacs-lisp
(use-package epresent
  :after org
  :commands epresent-run)
#+END_SRC

** Inline Image
*** Set inline image width to 600px

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-image-actual-width 600))
#+END_SRC

*** Enable drag-n-drop download for images

#+BEGIN_SRC emacs-lisp
(use-package org-download
  :after org
  :commands (org-download-image org-download-enable org-download-screenshot)
  :hook (dired-mode . org-download-enable)
  )

#+END_SRC

** Annotating documents

#+BEGIN_SRC emacs-lisp
(use-package org-noter
  :after org
  :commands org-noter)
#+END_SRC

** Exporting


#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox
  ;; export to bootstrap html
  (use-package ox-twbs
    :config
    (use-package htmlize))

  ;; gfm, mediawiki, etc
  (use-package ox-pandoc)

  ;; latex options

  (setq org-export-with-smart-quotes t)
  (setq org-latex-pdf-process
   '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  (setq org-latex-compiler "xelatex")
  (setq TeX-engine 'xetex)
  (setq TeX-PDF-mode t)

  ;; slides
  ;; (use-package ox-beamer)
)
#+END_SRC


** Custom keystrokes
*** In CLI rebind "<tab>"
*** =C-c n= to quickly open org files

#+BEGIN_SRC emacs-lisp
(defun open-org-file ()
  "Prompt the user to open a org file in the org file directory"
  (interactive)
  (let* ((dir (org-file-path "."))
         (files (f--files dir (f-ext? it "org")))
         (relative-files (--map (f-relative it dir) files))
         (chosen-file (completing-read "Select file: " relative-files)))
    (find-file (f-expand chosen-file dir))))

(bind-key "C-c n" 'open-org-file)
#+END_SRC

*** Use =C-c l= and =C-c L= to collect links

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind
  ("C-c l" . org-store-link)
  ("C-c L" . shou/copy-idlink-to-clipboard)

  :config
  ;; Adapted from Rainer's blog:
  ;; https://koenig-haunstetten.de/2018/02/17/improving-my-orgmode-workflow/
  (defun shou/copy-idlink-to-clipboard()
    "Copy an ID link with the
headline to killring, if no ID is there then create a new unique
ID.  This function works only in org-mode or org-agenda buffers.

The purpose of this function is to easily construct id:-links to
org-mode items. If its assigned to a key it saves you marking the
text and copying to the killring."
    (interactive)
    (save-window-excursion
      (when (eq major-mode 'org-agenda-mode) ;switch to orgmode
        (org-agenda-show)
        (org-agenda-goto))
      (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
        (let* ((head (nth 4 (org-heading-components)))
               ;; replace links with their description
               (clean-head (replace-regexp-in-string org-link-bracket-re "\\2" head))
               (id (funcall 'org-id-get-create))
               (link (format "[[id:%s][%s]]" id clean-head)))
          (kill-new link)
          (message "Copied %s to killring (clipboard)" link)
        )))))
#+END_SRC

*** Use =C-c C-c= to save and quit =org-src-mode=

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind (:map org-src-mode-map ("C-c C-c" . org-edit-src-exit)))
#+END_SRC

*** Disable unused export options

#+BEGIN_SRC emacs-lisp
(use-package org
  :init
  (setq org-export-backends '(ascii html latex)))
#+END_SRC

** Calendar integration

#+BEGIN_SRC emacs-lisp
(use-package org-caldav
  :defer t
  :custom
  (org-caldav-url
   (concat "https://caldav.fastmail.com/dav/calendars/user/"
           priv/fastmail-caldav-user))
  (org-caldav-calendar-id priv/fastmail-caldav-calendar-id)
  (org-caldav-inbox (org-file-path "time-blocking.org"))
  (org-caldav-files (list (org-file-path "time-blocking.org")))
  (org-caldav-sync-direction 'cal->org)
  (org-icalendar-timezone "Asia/Shanghai")
)
#+END_SRC

** Customize source languages

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-src-lang-modes
   '(("ocaml" . tuareg)
     ("elisp" . emacs-lisp)
     ("ditaa" . artist)
     ("asymptote" . asy)
     ("dot" . fundamental)
     ("sqlite" . sql)
     ("calc" . fundamental)
     ("C" . c)
     ("cpp" . c++)
     ("C++" . c++)
     ("screen" . shell-script)
     ("shell" . sh)
     ("bash" . sh))
     ("lojban" . lojban)
   ))
#+END_SRC


** Org babel

#+begin_src emacs-lisp
(use-package org
  :config
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((ditaa . t)
                                 (gnuplot .t)
                                 (python . t)
                                 (haskell . t)
                                 (scheme . t)
                                 ))
  (use-package gnuplot :commands gnuplot-mode)
  (use-package geiser)

  :custom
  (python-shell-completion-native-enable nil)

  (haskell-process-type 'stack-ghci)
  (haskell-program-name "ghci")

  (geiser-default-implementation 'racket)

  :config
  ;; this key is used to interrupt geiser
  (unbind-key "C-c C-k" org-mode-map)
  )
#+end_src

* Playground

Try out stuff here and execute manually.

#+begin_src emacs-lisp :eval query
(+ 1 1)
#+end_src


#+RESULTS:
: 2

* fanmo

.i fanmo
