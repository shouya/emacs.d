#+TITLE: My Emacs Preferences
#+latex_compiler: xelatex
#+latex_header: \usemintedstyle{emacs}

* Setup personal information

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t; -*-
(setq-default user-full-name "Shou Ya"
              user-email-address "shou@lain.li")
#+END_SRC
* Boot up
** Suppress GC at startup

Doing so will boost boot-up speed. See [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#avoid-garbage-collection-at-startup][Avoid garbage collection at startup]].

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold most-positive-fixnum) ; 2^61 bytes

;; reset it after load
; (add-hook 'emacs-startup-hook
;           (lambda ()
;             (setq gc-cons-threshold gc-cons-threshold-default
;                   gc-cons-percentage gc-cons-percentage-default)))
#+END_SRC

** Trick to make startup faster

#+BEGIN_SRC emacs-lisp
(defvar cfg--file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(add-hook 'emacs-startup-hook
          (lambda () (setq file-name-handler-alist cfg--file-name-handler-alist)))
(add-hook 'emacs-startup-hook
          (lambda () (message "Emacs ready in %.2f seconds with %d garbage collections."
                         (float-time (time-subtract after-init-time before-init-time))
                         gcs-done)))
#+END_SRC

** Enable packages are loadable

=lisp/= stores modules I copied from [[https://github.com/purcell/emacs.d][purcell/emacs.d]].

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+END_SRC

=site-lisp/= stores downloaded modules that are not on MELPA.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "site-lisp" user-emacs-directory))
#+END_SRC

** Configure =straight.el=

=straight.el= allows loading packages directly from VC upstream, while keeping a
lock file for specific version, some new packages depend on it.

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

** Enable ELPA with straight

#+BEGIN_SRC emacs-lisp
(straight-use-package 'el-patch)
#+END_SRC

** Install =use-package= with straight.el
Ensure =use-package= is installed.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(defvar use-package-compute-statistics)
(setq use-package-compute-statistics t)
(setq straight-use-package-by-default t)
#+END_SRC

Allow installing required system packages automatically.

#+BEGIN_SRC emacs-lisp
(use-package use-package-ensure-system-package)
#+END_SRC

** Start server automatically

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook
          (lambda ()
            (require 'server)
            (unless (server-running-p)
              (server-start))))
#+END_SRC

** Start edit server (for browser extensions)

#+BEGIN_SRC emacs-lisp
(use-package edit-server
  :config (edit-server-start))
#+END_SRC

** Make window resizable by window manager

#+BEGIN_SRC emacs-lisp
(setq-default frame-resize-pixelwise t)
#+END_SRC

** Set exec path

#+BEGIN_SRC emacs-lisp
(add-to-list 'exec-path "~/.asdf/shims")
#+END_SRC

** Inhibit startup screen

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

* General behavior
** Sensible defaults

https://raw.githubusercontent.com/hrs/sensible-defaults.el/master/sensible-defaults.el

#+BEGIN_SRC emacs-lisp
(require 'sensible-defaults)
(sensible-defaults/use-all-settings)
(sensible-defaults/backup-to-temp-directory)
(sensible-defaults/show-matching-parens)
#+END_SRC

** Save customized settings in a seperate file

By default the customization is saved into =init.el=. Avoid the mess by saving it
in a seperate file =custom.el=.

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
(load-file custom-file)
#+END_SRC

** macOS specific customization
*** Emacs release selection

Not all Emacs release works good under macOS. Here's the best one I found.

[[https://github.com/railwaycat/homebrew-emacsmacport]]

Features:

- Window resizable
- Good OS clipboard interaction
- Meta+Shift combo recognized in Emacs

*** Treat option key as meta

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq-default mac-option-modifier 'meta)
  (setq-default mac-command-modifier 'super))
#+END_SRC

*** Enable clipboard for terminal

#+BEGIN_SRC emacs-lisp
(use-package osx-clipboard
  :if (eq system-type 'darwin)
  :config (osx-clipboard-mode +1))
#+END_SRC

*** =Cmd+C/Cmd+C= for copying and pasting

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (global-set-key (kbd "s-c") 'kill-ring-save)
  (global-set-key (kbd "s-v") 'yank))
#+END_SRC

** =C-c e= to edit current preferences

#+BEGIN_SRC emacs-lisp
(define-key global-map
  (kbd "C-c e")
  (lambda ()
    (interactive)
    (find-file (expand-file-name "preferences.org" user-emacs-directory))))
#+END_SRC

** =C-x k= Kill current buffer

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-x k")
  (lambda () (interactive) (kill-buffer (current-buffer))))
#+END_SRC

** Open scratch

#+BEGIN_SRC emacs-lisp
(defun scratch ()
  "open a scratch buffer"
  (interactive)
  (let* ((buffer-name (make-temp-name "scratch-"))
         (buffer (generate-new-buffer buffer-name)))
    (set (make-local-variable 'major-mode) 'org-mode)
    (switch-to-buffer buffer)
    (org-mode)
    (insert "* Scratch\n")))
#+END_SRC

** Web browser


I use eww as default web browser when opening web url in emacs.

I also like to open the browser in a separate window instead of on the current
one.

#+BEGIN_SRC emacs-lisp
(defun shou/eww-browse-url-in-new-buffer (url &rest ignore)
  (interactive "sURL: ")
  (switch-to-buffer-other-window (get-buffer-create "*eww*"))
  (eww-browse-url url))

(setq browse-url-browser-function 'shou/eww-browse-url-in-new-buffer)
#+END_SRC

=eww-readable= makes the web page more readable by hiding unnecessary content, so
I switched to readable mode after a web page is rendered.

#+BEGIN_SRC emacs-lisp
;; (add-hook 'eww-after-render-hook 'eww-readable)
(setq eww-after-render-hook '())
#+END_SRC

** Run garbage collector on idle

Garbage collection magic hack.

#+BEGIN_SRC emacs-lisp
(use-package gcmh
  :hook (emacs-startup . gcmh-mode)
  :custom (gcmh-idle-timer 3))
#+END_SRC

** Startup profiler

#+BEGIN_SRC emacs-lisp
(use-package esup
  :commands (esup))
#+END_SRC

* UI
** Tweak main UI

Hide the title bar, menu bar, as well as the scroll bar.

#+BEGIN_SRC emacs-lisp
(when (boundp 'tool-bar-mode)
  (add-hook 'emacs-startup-hook (lambda () (tool-bar-mode -1))))
(when (boundp 'menu-bar-mode)
  (menu-bar-mode -1))
(when (boundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
#+END_SRC

Enable pixel-wise scrolling for mouse scroll-wheel. It looks nicer.

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook 'pixel-scroll-mode)
#+END_SRC

Disable visual bell because Emacs for macOS renders it poorly.

#+BEGIN_SRC emacs-lisp
(setq-default ring-bell-function 'ignore)
#+END_SRC

Show file name in window title.

#+BEGIN_SRC emacs-lisp
(setq frame-title-format '("%b - %m @ Emacs"))
#+END_SRC

** Set font

I use "Input" as my default font face.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
  :family "Input"
  :height 130
  :weight 'light
  :width 'normal)
#+END_SRC

** Theme

I use =sanityinc-tomorrow= theme because it's high contrast and colorful.

#+BEGIN_SRC emacs-lisp
(use-package color-theme-sanityinc-tomorrow
  :config
  (load-theme 'sanityinc-tomorrow-night t))
#+END_SRC

** Modeline customization

I use =minions= to contract all minor modes into a single one.

#+BEGIN_SRC emacs-lisp
(use-package minions
  :config
  (minions-mode 1))
#+END_SRC

** Use fancy lambdas

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC

** Highlight current line

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
#+END_SRC

** Highlight uncommitted changes

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :config
  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+END_SRC
** Install all-the-icon

In order for the icons to work it is very important that you install the
Resource Fonts included in this package, they are available in the fonts
directory. You can also install the latest fonts for this package in the
(guessed?) based on the OS by calling the following function;

=M-x all-the-icons-install-fonts=

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC
** Blink cursor

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 1)
#+END_SRC
** Window split

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-x -") 'split-window-below)
(define-key global-map (kbd "C-x |") 'split-window-right)
#+END_SRC
** Keep track of cursor whenever window scrolls

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :commands beacon-mode
  :hook (emacs-startup . beacon-mode)
  :custom (beacon-color "#d3d3d3"))
#+END_SRC
** Turn off auto window scroll to get faster movement

This trick is based on [[https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746][motion - Emacs point(cursor) movement lag]].

#+BEGIN_SRC emacs-lisp
(setq auto-window-vscroll nil)
#+END_SRC

* Evil mode
** Load =evil=
Set =evil-want-keybinding= to =nil= to disable a startup warning, see ([[https://github.com/emacs-evil/evil-collection/issues/60][related
issue]]).

Then load evil mode.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init (setq evil-want-keybinding nil)
  ; :defer nil
  :hook (emacs-startup . evil-mode)
  :custom (evil-symbol-word-search t))
#+END_SRC

** A collection of Vim key bindings among modes
Install evil-collection, which provides evil-friendly bindings for many modes.

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :config (evil-collection-init))
#+END_SRC

** Manipulate surroundings with Vim key bindings

Available keys:

| Key  | Action                                           |
|------+--------------------------------------------------|
| =S(=   | (Visual) surround selected text with ()          |
| =d(=   | delete surrounding pair of ()                    |
| =c("=  | change surrounding pair of () to ""              |
| =ysw(= | surround pair of () around word (specified by =w=) |

The =(=, ="= in above key bindings can be replace with arbitrary Surround objects:

| name            | object  | info          | d/c object |
|-----------------+---------+---------------+------------|
| tag             | =<q>=     | =<q>= and =</q>=  | =t=          |
| quote           | =", '=    | ="= and ="=       | same       |
| bracket         | =(, [, {= | =(= and =)=       | same       |
| bracket w/space | =), ], }= | ="( "= and =" )"= | same       |
| function call   | =fprint=  | =print(= and =)=  | =f=          |


*** Code

Enable surround everywhere.

Note by default open brackets objects (e.g. =(=) insert extra space, while close
bracket don't. I like it the other way around.

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1)
  (evil-add-to-alist 'evil-surround-pairs-alist
                     ?\( '("(" . ")")
                     ?\[ '("[" . "]")
                     ?\{ '("{" . "}")
                     ?\) '("( " . " )")
                     ?\] '("[ " . " ]")
                     ?\} '("{ " . " }")))
#+END_SRC

** Org mode

Use =evil= key bindings with Org agendas.

#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :after (org evil)
  :hook ((org-mode . evil-org-mode)
         (evil-org-mode . evil-org-set-key-theme))
  :config
  (require 'evil-org-agenda)
  (evil-define-key 'motion org-mode-map (kbd "TAB") 'org-cycle)
  (evil-org-agenda-set-keys))
#+END_SRC

** Set shift size to 2

Triggered with =<<= and =>>=.

#+BEGIN_SRC emacs-lisp
(setq-default evil-shift-width 2)
#+END_SRC

** Match =begin =... =end= with =%=

#+BEGIN_SRC emacs-lisp
(use-package evil-matchit
  :after evil
  :config (global-evil-matchit-mode 1))
#+END_SRC

** Search symbol instead of word

Make =*= search for symbol (e.g. =my-token=) instead of word.

#+BEGIN_SRC emacs-lisp
#+END_SRC

** Increment/Decrement numbers

Works just like C-a/C-x in vim.

#+BEGIN_SRC emacs-lisp
(use-package evil-numbers
  :bind (:map evil-normal-state-map
              ("+" . evil-numbers/inc-at-pt)
              ("-" . evil-numbers/dec-at-pt)
              ("_" . evil-numbers/dec-at-pt)))
#+END_SRC

* =dired-mode=
** Load =dired-x= by default

Load Dired X that comes with Emacs.

#+BEGIN_SRC emacs-lisp
(require 'dired-x)
#+END_SRC

** Retain the same window when browsing

#+BEGIN_SRC emacs-lisp
(use-package evil
  :config
  ;; RET to find file in same window
  (evil-define-key 'normal dired-mode-map (kbd "RET") 'dired-find-alternate-file)
  ;; do not show warning
  (put 'dired-find-alternate-file 'disabled nil))
#+END_SRC

** Recursive copy and delete

#+BEGIN_SRC emacs-lisp
;; Always copy recursively
(setq-default dired-recursive-copies 'always)

;; Ask once before deleting
(setq-default dired-recursive-deletes 'top)
#+END_SRC

** Hide dot files by default

Hit =.= key to reveal the files.

#+BEGIN_SRC emacs-lisp
(use-package dired-hide-dotfiles
  :after (evil dired)
  :config
  (evil-define-key 'normal dired-mode-map
    (kbd ".") 'dired-hide-dotfiles-mode)
  (add-hook 'dired-mode-hook 'dired-hide-dotfiles-mode))
#+END_SRC

** Hide details by default

The details can be revealed by hitting =(= key.

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC

** Make dired perform IO actions asynchronously

So it doesn't block the main UI when copying large files.

#+BEGIN_SRC emacs-lisp
(use-package async
  :config
  (dired-async-mode 1))
#+END_SRC

** File tree view (=<f8>=)

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :bind ("<f8>" . neotree-toggle)
  :custom
  (neo-theme (if (display-graphic-p) 'icons 'arrow))
  (neo-smart-open t "auto find current file and jump to node")
  (neo-vc-integration '(face))
  (projectile-switch-project-action
   'neotree-projectile-action
   "switch to neotree to projectile root dir"))
#+END_SRC

* Document reading
** EPUB

#+BEGIN_SRC emacs-lisp
(use-package nov
  :mode ("\\.epub\\'" . nov-mode))
#+END_SRC

* Terminal
** Use =vterm= for terminal support

#+BEGIN_SRC emacs-lisp
(use-package vterm
  :after evil-collection
  :commands (vterm vterm-other-window)
  :bind (("C-c t" . vterm)))
         ;; :map vterm-mode ("C-c C-l" . vterm-clear-scrollback)))
#+END_SRC

** Use =multi-term= to manage terminal sessions

#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :commands multi-term
  :config
  ;; Use login shell
  (setq-default multi-term-program-switches "--login")

  ;; Make URLs clickable
  (add-hook 'term-mode-hook 'goto-address-mode))
#+END_SRC
* Editing
** Indentation

Use tab-width of 2 by default.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
#+END_SRC

Always indent with spaces.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

Some modes set this variable automatically, so we need to override them.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook
          (lambda () (setq-default indent-tabs-mode nil)))
#+END_SRC

** Cursor movement
*** Use subword mode everywhere

#+BEGIN_SRC emacs-lisp
(use-package subword
  :hook (emacs-startup . global-subword-mode))
#+END_SRC

** Undo tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :hook (emasc-startup . global-undo-tree-mode))
#+END_SRC

** Minibuffer Completion
*** Ivy and Counsel

I use counsel and ivy to complete commands in minibuffer.

Ref: [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org#configure-ivy-and-counsel][hrs/dotfiles]]

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind
  ("M-x" . counsel-M-x)
  ("C-s" . swiper)

  :hook
  (emacs-startup . ivy-mode)

  :custom
  (ivy-count-format "(%d/%d) ")
  ;; Wrap around when reaches last page
  (ivy-wrap t)
  ;; Use recentf in switch buffers
  (ivy-use-virtual-buffers t)
  ;; Do not insert "^" automatically
  (ivy-initial-inputs-alist nil)

  ;; Ignore order for searching words on files
  ;; Use regular matching for others
  (ivy-re-builders-alist '((read-file-name-internal . ivy--regex-ignore-order)
                           (t . ivy--regex-plus))))
#+END_SRC

*** Sort the result produced by =ivy=

=prescient.el= sort the result of ivy based on their "recency" metric.

#+BEGIN_SRC emacs-lisp
(use-package ivy-prescient
  :after counsel
  :config
  (ivy-prescient-mode))
#+END_SRC

** Combo key hints

I use =which-key= package to display a screen of hints when a key prefix is
entered.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :hook (emacs-startup . which-key-mode)
  :custom
  (which-key-idel-delay 1.5))
#+END_SRC

** Expand region (~C-=~, ~C--~, ~v =~, ~v -~)

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind (("C-=" . er/expand-region)
         ("C--" . er/contract-region)

         :map evil-visual-state-map
         ("=" . er/expand-region)
         ("-" . er/contract-region)))
#+END_SRC

** Writing prose
*** Markdown format support

- Associate =.md= files with the mode
- Use =pandoc= to render the result (please ensure it

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands gfm-mode
  :mode (("\.md$" . gfm-mode))
  :config
  (when (executable-find "pando")
    (setq-default markdown-command "pandoc --standalone --mathjax --from=markdown")))
#+END_SRC

*** Define the list of text mode hooks

#+BEGIN_SRC emacs-lisp
(setq-default text-mode-hooks
              '(text-mode-hook
                markdown-mode-hook
                gfm-mode-hook
                org-mode-hook))
#+END_SRC

*** Enable spell checking

Remember to install =ispell= command line tool.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :when (executable-find "ispell")
  :ensure-system-package ispell
  :config
  (setq-default ispell-personal-dictionary
                (expand-file-name "user-dict" user-emacs-directory))

  ;; enable flyspell-mode for text modes
  (dolist (hook text-mode-hooks) (add-hook hook 'flyspell-mode))

  ;; sort correction by likelihood
  (setq-default flyspell-sort-corrections t)

  ;; save to personal dictionary without confirmation
  (setq-default ispell-silently-savep t))
#+END_SRC

Use =M-$= to correct word at point.

*** Enable auto wrap

#+BEGIN_SRC emacs-lisp
(dolist (hook text-mode-hooks)
  (add-hook hook 'auto-fill-mode))
#+END_SRC

*** Linting prose

We first define =proselint= checker for flycheck. Remember to install =proselint=
CLI tool.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config
  (when (executable-find "proselint")
    (flycheck-define-checker proselint
      "A linter for prose."
      :command ("proselint" source-inplace)
      :error-patterns
      ((warning line-start (file-name) ":" line ":" column ": "
                (id (one-or-more (not (any " "))))
                (message (one-or-more not-newline)
                         (zero-or-more "\n" (any " ") (one-or-more not-newline)))
                line-end))
      :modes (text-mode markdown-mode gfm-mode org-mode))

    (add-to-list 'flycheck-checkers 'proselint)))
#+END_SRC


Next we enable proselint for text modes.

#+BEGIN_SRC emacs-lisp
(dolist (hook text-mode-hooks)
  (add-hook hook #'flycheck-mode))
#+END_SRC

*** Auto correct frequent typo
#+BEGIN_SRC emacs-lisp
(use-package auto-correct
  :config
  (dolist (hook text-mode-hooks)
    (add-hook hook 'auto-correct-mode)))
#+END_SRC

** Key cast mode

#+BEGIN_SRC emacs-lisp
(use-package keycast
  :commands keycast-mode)
#+END_SRC

** Bind keys for transpose char

#+BEGIN_SRC emacs-lisp
(defun shou/transpose-next-char ()
  (interactive)
  (save-excursion
    (forward-char)
    (transpose-chars 1)))
(define-key evil-normal-state-map (kbd "C-t") 'shou/transpose-next-char)
#+END_SRC

* Programming
** Show column number

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'column-number-mode)
#+END_SRC

Also show a ruler at column 80.

#+BEGIN_SRC emacs-lisp
(setq-default whitespace-line-column 80
              whitespace-style '(face lines-tail))
(add-hook 'prog-mode-hook 'whitespace-mode)
#+END_SRC

** Syntax checking

Enable flycheck for syntax checking.

#+BEGIN_SRC emacs-lisp
(use-package flycheck)
#+END_SRC

** Jump to definition (=M-.=)

We use =dumb-jump=, which works out of the box for many languages.

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :after evil
  :bind (:map evil-normal-state-map
              ("M-." . dumb-jump-go))
  :custom
  (dumb-jump-selector 'ivy)
  (dumb-jump-force-searcher 'rg))
#+END_SRC

** Spell checking in comment

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

** Highlight all occurrences word at point

#+BEGIN_SRC emacs-lisp
(use-package idle-highlight-mode
  :config
  (setq-default idle-highlight-idle-time 0.3)
  (add-hook 'prog-mode-hook 'idle-highlight-mode))
#+END_SRC

** Git
*** Use =magit= to show git status

I use =magit= to show git status.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)
  :config
  ;; automatically refresh after saving a file
  (add-hook 'after-save-hook 'magit-after-save-refresh-status t))
#+END_SRC

*** Use evil motion keys in =magit=
And enable =evil-magit= for evil-style motion.

#+BEGIN_SRC emacs-lisp
(use-package evil-magit
  :init (setq-default evil-magit-state 'motion)
  :after magit)
#+END_SRC

*** Switch to evil insert state when entering commit message

#+BEGIN_SRC emacs-lisp
(add-hook 'git-commit-mode-hook 'evil-insert-state)
#+END_SRC

*** =GitHub= support

#+BEGIN_SRC emacs-lisp
(use-package magithub
  :after magit
  :config
  (magithub-feature-autoinject t))
#+END_SRC

Use =magit='s project =forge= for GitHub interaction.

#+BEGIN_SRC emacs-lisp
;; (use-package ghub
;;   :after magit)
;; (use-package forge
;;   :after magit)
#+END_SRC

** Project management
*** Use =ripgrep= (=<f5>=)

#+BEGIN_SRC emacs-lisp
(use-package deadgrep
  :ensure-system-package (rg . ripgrep)
  :config (evil-collection-deadgrep-setup)
  :bind (("<f5>" . deadgrep)))
#+END_SRC

*** Use =projectile= to open files within project

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :custom
  (projectile-completion-system 'ivy)
  (projectile-switch-project-action 'projectile-dired)
  (projectile-enable-caching t)
  (projectile-indexing-method 'native)

  :config
  (projectile-mode 1)

  :bind
  ("M-p" . projectile-command-map))
#+END_SRC

*** Customize project-find-functions to find multi-project vc

Let the project root to be where =mix.exs= is found. This function is used by
=eglot=.

#+BEGIN_SRC emacs-lisp
(defun shou/elixir-project-finder (dir)
  (let ((probe (locate-dominating-file dir "mix.exs")))
    (and probe (cons 'vc probe))))
(add-hook 'project-find-functions 'shou/elixir-project-finder)
;; (defun project-try-vc (dir)
;;   (let* ((backend (ignore-errors (vc-responsible-backend dir)))
;;          (root (and backend (ignore-errors
;;                               (vc-call-backend backend 'root dir)))))
;;     (and root (cons 'vc root))))

#+END_SRC

** Search symbol at point in Dash with =C-c D=

#+BEGIN_SRC emacs-lisp
(use-package dash-at-point
  :if (eq system-type 'drawin)
  :ensure-system-package
  ("/Applications/Dash.app" . "brew cask install dash")
  )
#+END_SRC

** Auto completion (=M-/=)
*** Completion engine

Use =company-mode= for auto completion.

#+BEGIN_SRC emacs-lisp
(use-package company
  :bind ("M-/" . company-complete)
  :hook (emacs-startup . global-company-mode)

  :custom
  (company-idle-delay 0.4 "Show completion immediately")
  (company-show-numbers t "Number the candidates (use M-1, M-2 etc to select completions)")
  (company-tooltip-align-annotations t)
  (company-backends '(company-bbdb
                      company-eclim
                      company-semantic
                      company-clang
                      company-xcode
                      company-cmake
                      company-capf
                      company-files
                      (company-dabbrev-code company-gtags company-etags company-keywords)
                      company-oddmuse
                      company-dabbrev
                      ))

  :config
  (define-key company-active-map (kbd "TAB")
    (lambda () (interactive) (company-complete-common-or-cycle +1)))
  (define-key company-active-map (kbd "S-TAB")
    (lambda () (interactive) (company-complete-common-or-cycle -1))))
#+END_SRC

*** TabNine

Use =TabNine= for general text completion. Please remember to run
=(company-tabnine-install-binary)= after first install.

#+BEGIN_SRC emacs-lisp
(use-package company-tabnine
  :if (eq system-type 'darwin)
  :commands company-tabnine
  :after company
  :config
  (add-to-list 'company-backends 'company-tabnine))

(defun shou/tabnine-off ()
  "turn off TabNine for this buffer"
  (interactive)
  (setq-local company-backends (delete company-tabnine company-backends)))

(defun shou/tabnine-on ()
  "turn on TabNine for this buffer"
  (interactive)
  (setq-local company-backends (add-to-list company-backends 'company-tabnine)))
#+END_SRC

*** Company completion icons on GUI
#+BEGIN_SRC emacs-lisp
(use-package company-box
  :init (require 'icons-in-terminal)
  :if (display-graphic-p)
  :disabled
  :hook (company-mode . company-box-mode)
  :config

  (setq-default company-box-enable-icon nil)
  (setq-default company-box-icons-unknown 'fa_question_circle)

  (setq-default company-box-icons-elisp
                '((fa_tag :face font-lock-function-name-face) ;; Function
                  (fa_cog :face font-lock-variable-name-face) ;; Variable
                  (fa_cube :face font-lock-constant-face)     ;; Feature
                  (md_color_lens :face font-lock-doc-face)))  ;; Face

  (setq-default company-box-icons-yasnippet 'fa_bookmark)

  (setq-default company-box-icons-lsp
                '((1 . fa_text_height)                               ;; Text
                  (2 . (fa_tags :face font-lock-function-name-face)) ;; Method
                  (3 . (fa_tag :face font-lock-function-name-face))  ;; Function
                  (4 . (fa_tag :face font-lock-function-name-face)) ;; Constructor
                  (5 . (fa_cog :foreground "#FF9800"))              ;; Field
                  (6 . (fa_cog :foreground "#FF9800"))              ;; Variable
                  (7 . (fa_cube :foreground "#7C4DFF"))             ;; Class
                  (8 . (fa_cube :foreground "#7C4DFF"))             ;; Interface
                  (9 . (fa_cube :foreground "#7C4DFF"))             ;; Module
                  (10 . (fa_cog :foreground "#FF9800"))             ;; Property
                  (11 . md_settings_system_daydream)                ;; Unit
                  (12 . (fa_cog :foreground "#FF9800"))             ;; Value
                  (13 . (md_storage :face font-lock-type-face))     ;; Enum
                  (14 . (md_closed_caption :foreground "#009688"))  ;; Keyword
                  (15 . md_closed_caption)                          ;; Snippet
                  (16 . (md_color_lens :face font-lock-doc-face))   ;; Color
                  (17 . fa_file_text_o)                             ;; File
                  (18 . md_refresh)                                 ;; Reference
                  (19 . fa_folder_open)                             ;; Folder
                  (20 . (md_closed_caption :foreground "#009688")) ;; EnumMember
                  (21 . (fa_square :face font-lock-constant-face)) ;; Constant
                  (22 . (fa_cube :face font-lock-type-face))       ;; Struct
                  (23 . fa_calendar)                               ;; Event
                  (24 . fa_square_o)                               ;; Operator
                  (25 . fa_arrows)) ;; TypeParameter
                ))
#+END_SRC
*** Company completion pop up on CLI

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :if (not (display-graphic-p))
  :config
  (add-hook 'company-mode-hook 'company-quickhelp-mode))
#+END_SRC

*** Yasnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :commands yas-minor-mode
  :hook (prog-mode . yas-minor-mode)

  :config
  (setq-default yas-snippet-dirs
                `(,(expand-file-name "snippets" user-emacs-directory)))
  (yas-reload-all))
#+END_SRC

*** Support Language Server Protocols (LSP)

We use =eglot= for LSP support. Since eglot has a hook that turns off any company backends

#+BEGIN_SRC emacs-lisp
(use-package eglot
  :after (company yasnippet)
  :config (setq-default eglot-stay-out-of '(company)))
#+END_SRC

*** Configure company backends

#+BEGIN_SRC emacs-lisp
(setq-default default-company-backends
              '(company-files
                company-capf
                company-tabnine))
(setq-default company-backend-alist
              '((prog-mode-hook (company-files
                                 company-capf))
                (emacs-lisp-mode-hook (company-files company-elisp))))

(setq-default company-backends default-company-backends)
(dolist (pair company-backend-alist)
  (let ((hook (car pair))
        (backends (cadr pair)))
    (add-hook hook
              `(lambda () (interactive)
                 (set (make-local-variable 'company-backends) ',backends)))))
#+END_SRC

** Languages
*** Lisps
**** Use =paredit= in lisp modes to balance parentheses

I customized several bindings because "C-<left>/<right>" is bound to
"previous/next desktop" on my macOS.

I loaded =evil-paredit= package to prevent accidentally creating mismatched
brackets with =evil= editing.

#+BEGIN_SRC emacs-lisp
(use-package paredit
  :bind (:map paredit-mode-map
              ;; ((a|) b) => ((a| b))
              ("M-<right>" . paredit-forward-slurp-sexp)
              ;; ((a| b)) => ((a|) b)
              ("M-<left>" . paredit-forward-barf-sexp)
              ;; (a (|b)) => ((a |b))
              ("M-S-<left>" . paredit-backward-slurp-sexp)
              ;; ((a |b)) => (a (|b))
              ("M-S-<right>" . paredit-backward-barf-sexp)
              ;; ((a|) b) => (a| b)
              ("M-<down>" . paredit-splice-sexp)
              ;; (|a b) => ((a) b)
              ("M-<up>" . paredit-wrap-sexp)
              ;; (|a b) => ((a) b)
              ("M-(" . paredit-wrap-round))

  :config
  (use-package evil-paredit
    :after evil
    :hook (paredit-mode . evil-paredit-mode)
    :config
    ;; Fix some glitches when used alongside evil-surround mode
    (add-to-list 'evil-surround-operator-alist
                 '(evil-paredit-change . change))
    (add-to-list 'evil-surround-operator-alist
                 '(evil-paredit-delete . delete)))
  )
#+END_SRC

**** Use =rainbow-delimiters=

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC

**** Enable above two modes for all lisp languages

#+BEGIN_SRC emacs-lisp
(setq lispy-mode-hooks
      '(clojure-mode-hook
        emacs-lisp-mode-hook
        lisp-mode-hook
        scheme-mode-hook))

(dolist (hook lispy-mode-hooks)
  (add-hook hook
            (lambda ()
              (setq-default show-paren-style 'parenthesis)
              (paredit-mode)
              (rainbow-delimiters-mode))))
#+END_SRC

**** Shorten =Emacs lisp= into =Elisp= in mode name

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook (lambda () (setq-default mode-name "Elisp")))
#+END_SRC

**** Use =eldoc= to display documentation

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :config
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode))
#+END_SRC

**** Highlight info documentations

Colorize function names/arguments in info doucmentations.

#+BEGIN_SRC emacs-lisp
(use-package info-colors
  :config (add-hook 'Info-selection-hook 'info-colors-fontify-mode))
#+END_SRC

*** Elixir
**** Use =elixir-mode= for highlighting

#+BEGIN_SRC emacs-lisp
(use-package elixir-mode
  :mode (("\\.exs\\'" . elixir-mode)
         ("\\.ex\\'" . elixir-mode))
  :config
  (define-key elixir-mode-map (kbd "M-F") 'elixir-format))
#+END_SRC

**** Enable eglot for completion from LSP

#+BEGIN_SRC emacs-lisp
(add-hook 'elixir-mode-hook 'eglot-ensure)
#+END_SRC

**** Auto un-indent "end"
#+BEGIN_SRC emacs-lisp
(use-package ruby-end
  :config
  (add-hook 'elixir-mode-hook
            (lambda ()
              (set (make-variable-buffer-local 'ruby-end-expand-keywords-before-re)
                   "\\(?:^\\|\\s-+\\)\\(?:do\\)")
              (set (make-variable-buffer-local 'ruby-end-check-statement-modifiers) nil)
              (ruby-end-mode +1))))
#+END_SRC
**** Run ExUnit
#+BEGIN_SRC emacs-lisp
(use-package exunit)
#+END_SRC
*** Protobuf

Simply install protobuf mode. Default settings should work.

#+BEGIN_SRC emacs-lisp
(use-package protobuf-mode
  :commands protobuf-mode
  :mode "\\.proto\\'"
  :mode "\\.proto3\\'")
#+END_SRC
*** JSON

Install JSON mode.

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :commands json-mode
  :mode "\\.json\\'")
#+END_SRC

Reformatting JSON.

#+BEGIN_SRC emacs-lisp
(use-package json-reformat
  :after json-mode
  :functions json-reformat-format
  :config
  (define-key json-mode-map (kbd "M-F")
    (lambda () (interactive) (mark-whole-buffer) (json-reformat-format))))
#+END_SRC
*** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :mode "\\.rs\\'"
  :config
  (setq-default rust-format-on-save t))
#+END_SRC
*** Shell

#+BEGIN_SRC emacs-lisp
(add-hook 'sh-mode-hook
          (lambda ()
            (setq-default sh-basic-offset 2
                          sh-indentation 2)))
#+END_SRC
*** Dockerfile

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile")
(use-package docker-compose-mode
  :mode "docker-compose\\.ya?ml"
  :mode "fig\\.ya?ml")
#+END_SRC

* Org mode
** Use org mode

#+BEGIN_SRC emacs-lisp
(use-package org
  :straight (org :type git
                 :repo "https://code.orgmode.org/bzg/org-mode.git"
                 :local-repo nil
                 :tag "release_9.3")
  :commands (org-mode)
  :mode ("\\.org\\'" . org-mode))
#+END_SRC

** Set org directory

#+BEGIN_SRC emacs-lisp
(if (eq system-type 'darwin)
  (setq-default org-directory "~/Documents/org")
  (setq-default org-directory "~/org"))

(defun org-file-path (filename)
  "Return the path of file inside org-directory"
  (expand-file-name filename org-directory))

(use-package org
  :custom (org-default-notes-file (org-file-path "notes.org")))
#+END_SRC

** Set =org-mode= as the default mode

#+BEGIN_SRC emacs-lisp
(setq-default initial-major-mode 'org-mode)
#+END_SRC

** Behavior tweaks
*** Indentation settings

First, we enable =org-indent-mode=:

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-ident-indentation-per-level 1)
  :config
  (add-hook 'org-mode-hook 'org-indent-mode))
#+END_SRC

Next we disable =org-mode='s built-in hard indentation:

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-adapt-indentation nil))
#+END_SRC

*** Make TAB acts like major mode in source block

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-src-tab-acts-natively t))
#+END_SRC

*** Let =<TAB>= fold current outline from anywhere in the section

#+BEGIN_SRC emacs-lisp
; (use-package org
;   :custom (org-cycle-emulate-tab 'white))
#+END_SRC

*** Avoid inadvertent text edit in invisible area

Reference: [[https://yiufung.net/post/org-mode-hidden-gems-pt1/#avoid-inadvertent-text-edit-in-invisible-area][Org-mode Hidden Gems - 01 Document Structure]].

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-catch-invisible-edits 'show-and-error))
#+END_SRC

*** Hide empty lines between subtrees in collapsed view

Reference: [[https://yiufung.net/post/org-mode-hidden-gems-pt1/#in-collapsed-view-hide-empty-lines-between-subtrees][Org-mode Hidden Gems - 01 Document Structure]].

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-cycle-separator-lines 0))
#+END_SRC

*** List bullets

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-list-demote-modify-bullet '(("+" . "-") ("-" . "+"))))
#+END_SRC

** Visual Tweaks
*** Fancy bullet headers

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode))
#+END_SRC

*** Hide leading stars

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-hide-leading-stars t))
#+END_SRC

*** Hide markup symbols

I'd like to hide ===, =+=, =*= symbols when not necessary.

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-hide-emphasis-markers t))
#+END_SRC

*** Customize wrap around symbol

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-hide-emphasis-markers t))
(setq-default org-ellipsis " ⤵")
#+END_SRC

*** Turn on native source fontification in org buffer

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-src-fontify-natively t))
#+END_SRC

** Source editing
*** Do not add indentation from org-src-edit

See [[https://emacs.stackexchange.com/questions/18877/how-to-indent-without-the-two-extra-spaces-at-the-beginning-of-code-blocks-in-or][reference]].

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-src-strip-leading-and-trailing-blank-lines t)
  (org-src-preserve-indentation t))
#+END_SRC

*** Use the same window for org-src-edit

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-src-window-setup 'current-window))
#+END_SRC

*** Include emacs-lisp src quickly

#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")))
#+END_SRC

** To-do settings
*** Log down time when marking an item "DONE"

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-log-done 'time))
#+END_SRC

** Taking note with =deft=

=deft.el= provides National Velocity-like note browsing and editing experience.

#+BEGIN_SRC emacs-lisp
(use-package deft
  :bind ("C-M-n" . deft)
  :commands (deft)
  :custom
  (deft-extensions '("org" "txt" "md" "markdown"))
  (deft-directory (org-file-path "deft"))
  (deft-default-extension "org" "use org as default format")
  (deft-recursive t "search recursively")
  (deft-use-filename-as-title t)
  (deft-use-filter-string-for-filename t "instead of some generated gibberish")
  (deft-auto-save-interval 60
    "don't auto save as it will reformat in middle of typing")
  (deft-file-naming-rules
    '((noslash . "-")
      (nospace . "-")
      (case-fn . downcase))
    "apply certain rules when generating file name")
  :config
  ;; switch to insert state when starting deft
  (add-hook 'deft-mode 'evil-insert-state))
#+END_SRC
** Roam

For building personal knowledge base, I like the idea of [[https://www.roamresearch.com/][Roam]], but it only have
a web version. Fortunately someone build a replica in =org-mode=, so great that I
don't need to leave Emacs for that.

#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :straight (:host github :repo "jethrokuan/org-roam" :branch "develop")
  :after org
  :commands (org-roam org-roam-insert org-roam-mode)
  :custom
  (org-roam-mute-cache-build t)
  (org-roam-directory (org-file-path "roam/"))

  :config
  (org-roam-mode)

  :bind
  ("C-c r l" . org-roam)
  ("C-c r t" . org-roam-today)
  ("C-c r f" . org-roam-find-file)
  ("C-c r i" . org-roam-insert)
  ("C-c r g" . org-roam-show-graph))
#+END_SRC
** Agenda
*** Use =C-c a= to enter agenda mode

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind ("C-c a" . org-agenda))
#+END_SRC

*** Set agenda files

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-agenda-files (list
                     (org-file-path "agenda.org")
                     (org-file-path "todo.org")
                     (org-file-path "work.org")
                     (org-file-path "diary.org")
                     (org-file-path "to-read.org"))))
#+END_SRC

*** Agenda view

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-agenda-start-on-weekday nil))
#+END_SRC

** Archiving

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-archive-location (concat (org-file-path "archive.org") "::* From %s")))
#+END_SRC

** Capturing

*** Use =org-clip-link= to insert title automatically

#+BEGIN_SRC emacs-lisp
(use-package org-cliplink
  :after org
  :commands (org-cliplink org-cliplink-capture)
  :bind ("C-c C-S-l" . org-cliplink))
#+END_SRC

*** Use =C-c c= for capturing

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind ("C-c c" . org-capture))
#+END_SRC

*** Capture templates

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-capture-templates `(;; Work
                           ("w" "(Work) To-do" entry (file+headline "todo.org" "Work")
                            "* TODO %^{Description}\n%?\nRef: %l\nAdded: %U\n")

                           ("p" "(Personal) To-do" entry (file+headline "todo.org" "Personal")
                            "* TODO %^{Description}\n%?\nRef: %l\nAdded: %U\n")

                           ;; Note
                           ("n" "Note" entry (file "notes.org")
                            "* %^{Note}\n%?\nAdded: %U\n")

                           ;; Reading
                           ("r" "Reading" entry (file "to-read.org")
                            "* %^{Article}\n%?\n%(org-capture-link)\nAdded: %U\n")

                           ;; Diary fragments
                           ("d" "Diary" entry (file+olp+datetree "diary.org")
                            "* %U %^{Diary}\n%?\n")
                           ))
  :hook (org-capture-mode . evil-insert-state))

#+END_SRC
** Presentation

#+BEGIN_SRC emacs-lisp
(use-package epresent
  :after org
  :commands epresent-run
  :config
  (add-hook 'epresent-start-presentation-hook 'evil-emacs-state))
#+END_SRC
** Inline Image
*** Set inline image width to 600px

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom (org-image-actual-width 600))
#+END_SRC

*** Enable drag-n-drop download for images

#+BEGIN_SRC emacs-lisp
(use-package org-download
  :after org
  :commands (org-download-image org-download-enable org-download-screenshot)
  :hook (dired-mode . org-download-enable)
  :custom (org-download-screenshot-method
           (when (eq system-type 'darwin)
             "screencapture -i %s"
             "xclip -selection clipboard -t image/png -o > %s")))
#+END_SRC

** Annotating documents

#+BEGIN_SRC emacs-lisp
(use-package org-noter
  :after org
  :commands org-noter)
#+END_SRC

** Exporting
*** Export to Bootstrap (HTML)

#+BEGIN_SRC emacs-lisp
(use-package ox-twbs
  :after (org ox))
#+END_SRC

*** Export to MediaWiki

#+BEGIN_SRC emacs-lisp
(use-package ox-mediawiki
  :after (org ox))
#+END_SRC

*** Export to Markdown (GFM)
#+BEGIN_SRC emacs-lisp
(use-package ox-gfm
  :after (org ox))
#+END_SRC
*** Export to PDF

Enable exporting to Beamer.

#+BEGIN_SRC emacs-lisp
(use-package ox-latex
  :straight nil
  :ensure nil
  :after (org ox))
(use-package ox-beamer
  :straight nil
  :ensure nil
  :after (org ox))
#+END_SRC

Enhance unicode characters support.

Enable syntax highlighting. In a fresh install please make sure =pygements= is
installed (~pip install Pygments~).

#+BEGIN_SRC emacs-lisp
(use-package org
  :custom
  (org-latex-pdf-process
   '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  (org-latex-compiler "xelatex")
  (TeX-engine 'xetex)
  (TeX-PDF-mode t))
#+END_SRC
** Custom keystrokes
*** In CLI rebind "<tab>"
*** =C-c n= to quickly open org files

#+BEGIN_SRC emacs-lisp
(defun open-org (file)
  (interactive "f")
  (find-file (org-file-path file)))

(defun open-org-todo () (interactive) (open-org "todo.org"))
(defun open-org-notes () (interactive) (open-org "notes.org"))
(defun open-org-diary () (interactive) (open-org "diary.org"))

;; Open todo.org with C-c n t
(define-prefix-command 'open-org-file)
(define-key global-map (kbd "C-c n") 'open-org-file)
(define-key global-map (kbd "C-c n t") 'open-org-todo)
(define-key global-map (kbd "C-c n n") 'open-org-notes)
(define-key global-map (kbd "C-c n d") 'open-org-diary)
#+END_SRC

*** Use =C-c l= to collect links

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind ("C-c l" . org-store-link))
#+END_SRC

*** Use =C-c C-c= to save and quit =org-src-mode=

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind (:map org-src-mode-map ("C-c C-c" . org-edit-src-exit)))
#+END_SRC
*** Disable unused export options

#+BEGIN_SRC emacs-lisp
(use-package org
  :init
  (setq org-export-backends '(ascii html latex)))
#+END_SRC
