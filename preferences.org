#+TITLE: My Emacs Preferences
#+latex_compiler: xelatex
#+latex_header: \usemintedstyle{emacs}

* Setup personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Shou Ya"
      user-email-address "shou@lain.li")
#+END_SRC

* Boot up
** Enable packages are loadable

=lisp/= stores modules I copied from [[https://github.com/purcell/emacs.d][purcell/emacs.d]].

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+END_SRC

=site-lisp/= stores downloaded modules that are not on MELPA.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "site-lisp" user-emacs-directory))
#+END_SRC

** Configure MELPA

We prepare the package repositories.

#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
#+END_SRC

Ensure =use-package= is installed.

#+BEGIN_SRC emacs-lisp
(when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

Make sure =use-package= install missing packages.

#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC

Auto compile packages with newest version available.

#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :config
  (auto-compile-on-load-mode)
  (setq load-prefer-newer t))
#+END_SRC

** Environment detection

#+BEGIN_SRC emacs-lisp
(defconst *is-a-mac* (eq system-type 'darwin))
#+END_SRC

** Sensible defaults

https://raw.githubusercontent.com/hrs/sensible-defaults.el/master/sensible-defaults.el

#+BEGIN_SRC emacs-lisp
(require 'sensible-defaults)
(sensible-defaults/use-all-settings)
(sensible-defaults/backup-to-temp-directory)
(sensible-defaults/show-matching-parens)
#+END_SRC

** Save customized settings in a seperate file

By default the customization is saved into =init.el=. Avoid the mess by saving it
in a seperate file =custom.el=.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC

* UI
** Tweak window

Hide the title bar, menu bar, as well as the scroll bar.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode -1)
#+END_SRC

Disable visual bell because Emacs for macOS renders it poorly.

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
(use-package leuven-theme
  :config
  (load-theme 'leuven t))
#+END_SRC

** Modeline customization

I use =minions= to contract all minor modes into a single one.

#+BEGIN_SRC emacs-lisp
(use-package minions
  :config (minions-mode 1))
#+END_SRC

** Use fancy lambdas

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC

** Highlight current line

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
#+END_SRC

** Highlight uncommited changes

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :config
  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+END_SRC

* Editing
** Use =org-mode= as default mode

#+BEGIN_SRC emacs-lisp
(setq major-mode 'org-mode)
#+END_SRC

** Indentation

Use tab-width of 2 by default.

#+BEGIN_SRC emacs-lisp
(setq tab-width 2)
#+END_SRC

Always indent with spaces.

#+BEGIN_SRC emacs-lisp
(setq indent-tabs-mode nil)
#+END_SRC

Some modes set this variable automatically, so we need to override them.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook
          (lambda () (setq indent-tabs-mode nil)))
#+END_SRC

** Cursor movement
*** Use subword mode everywhere

#+BEGIN_SRC emacs-lisp
(use-package subword
  :config (global-subword-mode 1))
#+END_SRC

** Enable =evil-mode=

Set =evil-want-keybinding= to =nil= to disable a startup warning, See ([[https://github.com/emacs-evil/evil-collection/issues/60][related
issue]]).

#+BEGIN_SRC emacs-lisp
(setq evil-want-keybinding nil)
#+END_SRC

Load evil mode.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :config
  (evil-mode 1))
#+END_SRC

Install evil-collection, which provides evil-friendly bindings for many modes.

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil)
#+END_SRC

Enable surround everywhere.

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+END_SRC

Use evil with Org agendas.

#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC

** Undo tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :config (add-hook 'after-init-hook 'global-undo-tree-mode))
#+END_SRC

** Minibuffer Completion

I use counsel and ivy to complete commands in minibuffer.

Ref: [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org#configure-ivy-and-counsel][hrs/dotfiles]]

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind
  ("M-x" . 'counsel-M-x)
  ("C-s" . 'swiper)

  :config
  (use-package flx)
  (use-package smex)

  (ivy-mode 1)
  (setq ivy-count-format "(%d/%d) "))
#+END_SRC

** =M-/= Expansion

+=hippie-expand= can trigger expansion based various rules.+ I currently prefer
=company-mode= for =M-/= expansion.

#+BEGIN_SRC emacs-lisp
;; (global-set-key (kbd "M-/") 'hippie-expand)
;;
;; (setq hippie-expand-try-functions-list
;;       '(try-complete-file-name-partially
;;         try-complete-file-name
;;         try-expand-dabbrev
;;         try-expand-dabbrev-all-buffers
;;         try-expand-dabbrev-from-kill))
#+END_SRC

Use =company-mode= for completion.

#+BEGIN_SRC emacs-lisp
(use-package company
  :bind ("M-/" . company-completion-common)
  :config (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** Combo key hints

I use =which-key= package to display a screen of hints when a key prefix is
entered.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (add-hook 'after-init-hook 'which-key-mode)
  (setq which-key-idel-delay 1.5))
#+END_SRC

** Expand region (~C-=~, ~C--~, ~v =~, ~v -~)

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind (("C-=" . er/expand-region)
         ("C--" . er/contract-region)

         :map evil-visual-state-map
         ("=" . er/expand-region)
         ("-" . er/contract-region)))
#+END_SRC

** Writing prose
*** Markdown format support

- Associate =.md= files with the mode
- Use =pandoc= to render the result (please ensure it

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands gfm-mode
  :mode (("\.md$" . gfm-mode))
  :config
  (when (executable-find "pando")
    (setq markdown-command "pandoc --standalone --mathjax --from=markdown")))
#+END_SRC

*** Define the list of text mode hooks

#+BEGIN_SRC emacs-lisp
(setq text-mode-hooks
      '(text-mode-hook
        markdown-mode-hook
        gfm-mode-hook
        org-mode-hook))
#+END_SRC

*** Enable spell checking

Remember to install =ispell= command line tool.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :config
  (setq ispell-personal-dictionary
        (expand-file-name "user-dict" user-emacs-directory))

  ;; enable flyspell-mode for text modes
  (dolist (hook text-mode-hooks) (add-hook hook 'flyspell-mode))

  ;; sort correction by likelihood
  (setq flyspell-sort-corrections t)

  :bind
  (:map evil-normal-state-map
        ("M->" . flyspell-correct-word-before-point)))
#+END_SRC

*** Enable auto wrap

#+BEGIN_SRC emacs-lisp
(dolist (hook text-mode-hooks)
  (add-hook hook 'auto-fill-mode))
#+END_SRC

*** Linting prose

We first define =proselint= checker for flycheck. Remember to install =proselint=
cli tool.

#+BEGIN_SRC emacs-lisp
(use-package flycheck)

(when (executable-find "proselint")
  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message (one-or-more not-newline)
                       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
              line-end))
    :modes (text-mode markdown-mode gfm-mode org-mode))

  (add-to-list 'flycheck-checkers 'proselint))
#+END_SRC


Next we enable proselint for text modes.

#+BEGIN_SRC emacs-lisp
(dolist (hook text-mode-hooks)
  (add-hook hook #'flycheck-mode))
#+END_SRC


* Programming
** Syntax checking

Enable flycheck for syntax checking.

#+BEGIN_SRC emacs-lisp
(use-package flycheck)
#+END_SRC

** Jump to definition (=M-.=)

We use =dumb-jump=, which works out of the box for many languages.

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :config
  (define-key evil-normal-state-map (kbd "M-.") 'dumb-jump-go)
  (setq dumb-jump-selector 'ivy)
  (setq dumb-jump-force-searcher 'rg))
#+END_SRC

** Project management

*** Use =ripgrep= (=<f5>=)

#+BEGIN_SRC emacs-lisp
(use-package deadgrep
  :config (evil-collection-deadgrep-setup)
  :bind (("<f5>" . deadgrep)))
#+END_SRC

*** Use =projectile= to open files within project

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (setq projectile-completion-system 'ivy)
    (setq projectile-switch-project-action 'projectile-dired)
    (setq projectile-require-project-root nil)
    :bind
    (:map evil-normal-state-map
          ("C-p" . projectile-find-file)))
#+END_SRC

** Search symbol at point in Dash with =C-c D=

#+BEGIN_SRC emacs-lisp
(when *is-a-mac*
  (use-package dash-at-point)
  (global-set-key (kbd "C-c D") 'dash-at-point))
#+END_SRC

** Languages
*** Lisps

**** Use =paredit= in lisp modes to balance parentheses

#+BEGIN_SRC emacs-lisp
(use-package paredit)
#+END_SRC

**** Use =rainbow-delimiters=

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC

**** Enable above two modes for all lisp languages

#+BEGIN_SRC emacs-lisp
(setq lispy-mode-hooks
      '(clojure-mode-hook
        emacs-lisp-mode-hook
        lisp-mode-hook
        scheme-mode-hook))

(dolist (hook lispy-mode-hooks)
  (add-hook hook
            (lambda ()
              (setq show-paren-style 'expression)
              (paredit-mode)
              (rainbow-delimiters-mode))))
#+END_SRC

**** Shorten =Emacs lisp= into =Elisp= in mode name

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook (lambda () (setq mode-name "Elisp")))
#+END_SRC

**** Use =eldoc= to display documentation

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :config
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode))
#+END_SRC

**** Highlight info documentations

Colorize function names/arguments in info doucmentations.

#+BEGIN_SRC emacs-lisp
(use-package info-colors
  :config (add-hook 'Info-selection-hook 'info-colors-fontify-mode))
#+END_SRC

*** Elixir

* Org mode
** Visual Tweaks
*** Fancy bullet headers

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

*** Hide leading stars

#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
#+END_SRC

*** Hide markup symbols

I'd like to hide ===, =+=, =*= symbols when not necessary.

#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

*** Customize wrap around symbol

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ⤵")
#+END_SRC

** Behavior tweaks
*** Do not add indentation from org-src-edit

See [[https://emacs.stackexchange.com/questions/18877/how-to-indent-without-the-two-extra-spaces-at-the-beginning-of-code-blocks-in-or][reference]].

#+BEGIN_SRC emacs-lisp
(setq org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t)
#+END_SRC

*** Turn on native source fontification in org buffer

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

*** Let =<TAB>= fold current outline from anywhere in the section

#+BEGIN_SRC emacs-lisp
(setq org-cycle-emulate-tab 'white)
#+END_SRC

** Custom keystrokes
*** Use =C-c l= to collect links

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c l") 'org-store-link)
#+END_SRC

*** Use =C-c C-c= to save and quit =org-src-mode=

#+BEGIN_SRC emacs-lisp
(define-key org-src-mode-map (kbd "C-c C-c") 'org-edit-src-exit)
#+END_SRC

** Indentation settings

First, we enable =org-indent-mode=:

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
;; (setq org-startup-indented t)
(setq org-indent-indentation-per-level 1)
#+END_SRC

Next we disable =org-mode='s built-in hard indentation:

#+BEGIN_SRC emacs-lisp
(setq org-adapt-indentation nil)
#+END_SRC
** Export to various formats
*** Disable unused export options
*** Export to PDF

Enable exporting to Beamer.

#+BEGIN_SRC emacs-lisp
(require 'ox-beamer)
#+END_SRC

Enhance unicode characters support.

#+BEGIN_SRC emacs-lisp
(setq org-latex-inputenc-alist '(("utf8" . "utf8x")))
;; (setq org-latex-default-packages-alist (cons '("mathletters" "ucs" nil) org-latex-default-packages-alist))
;; (add-to-list 'org-latex-packages-alist '("" "libertine"))
;; (add-to-list 'org-latex-packages-alist '("" "unicode-math"))
#+END_SRC

Enable syntax highlighting. In a fresh install please make sure =pygements= is
installed (~pip install Pygments~).

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
(setq org-latex-minted-options
      '(("frame" "lines")
        ("fontsize" "\\scriptsize")
        ("linenos" "")))
(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

*** Export to MediaWiki

#+BEGIN_SRC emacs-lisp
(use-package ox-mediawiki)
#+END_SRC
